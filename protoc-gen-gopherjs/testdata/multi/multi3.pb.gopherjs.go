// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: multi/multi3.proto

package multitest

import js "github.com/gopherjs/gopherjs/js"
import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion1

type Multi3_HatType int

const (
	Multi3_FEDORA Multi3_HatType = 0
	Multi3_FEZ    Multi3_HatType = 1
)

var Multi3_HatType_name = map[int]string{
	0: "FEDORA",
	1: "FEZ",
}
var Multi3_HatType_value = map[string]int{
	"FEDORA": 0,
	"FEZ":    1,
}

func (x Multi3_HatType) String() string {
	return Multi3_HatType_name[int(x)]
}

type Multi3 struct {
	*js.Object
}

// GetHatType gets the HatType of the Multi3.
func (m *Multi3) GetHatType() Multi3_HatType {
	return Multi3_HatType(m.Call("getHatType").Int())
}

// SetHatType sets the HatType of the Multi3.
func (m *Multi3) SetHatType(v Multi3_HatType) {
	m.Call("setHatType", v)
}

// New creates a new Multi3.
func (m *Multi3) New(hatType Multi3_HatType) *Multi3 {
	m = &Multi3{
		Object: js.Global.Get("proto").Get("multitest").Get("Multi3").New([]interface{}{
			hatType,
		}),
	}

	return m
}

// Serialize marshals Multi3 to a slice of bytes.
func (m *Multi3) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a Multi3 from a slice of bytes.
func (m *Multi3) Deserialize(rawBytes []byte) (*Multi3, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("multitest").Get("Multi3"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &Multi3{
		Object: obj,
	}, nil
}
