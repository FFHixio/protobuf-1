/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = __webpack_require__(1);
var goog = jspb;
var global = Function('return this')();

var multi_multi1_pb = __webpack_require__(2);
goog.exportSymbol('proto.my.test.Complex', null, global);
goog.exportSymbol('proto.my.test.Complex.Communique', null, global);
goog.exportSymbol('proto.my.test.Complex.Communique.Delta', null, global);
goog.exportSymbol('proto.my.test.Days', null, global);
goog.exportSymbol('proto.my.test.Simple', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.test.Simple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.test.Simple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.test.Simple.displayName = 'proto.my.test.Simple';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.test.Simple.prototype.toObject = function(opt_includeInstance) {
  return proto.my.test.Simple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.test.Simple} msg The msg instance to transform.
 * @return {!Object}
 */
proto.my.test.Simple.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deadline: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    day: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.test.Simple}
 */
proto.my.test.Simple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.test.Simple;
  return proto.my.test.Simple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.test.Simple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.test.Simple}
 */
proto.my.test.Simple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDeadline(value);
      break;
    case 3:
      var value = /** @type {!proto.my.test.Days} */ (reader.readEnum());
      msg.setDay(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.test.Simple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.test.Simple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.test.Simple} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.my.test.Simple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDeadline();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDay();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 key = 1;
 * @return {number}
 */
proto.my.test.Simple.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.my.test.Simple.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float deadline = 2;
 * @return {number}
 */
proto.my.test.Simple.prototype.getDeadline = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.my.test.Simple.prototype.setDeadline = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Days day = 3;
 * @return {!proto.my.test.Days}
 */
proto.my.test.Simple.prototype.getDay = function() {
  return /** @type {!proto.my.test.Days} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.my.test.Days} value */
proto.my.test.Simple.prototype.setDay = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.my.test.Simple.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.my.test.Simple.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.test.Complex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.my.test.Complex.repeatedFields_, null);
};
goog.inherits(proto.my.test.Complex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.test.Complex.displayName = 'proto.my.test.Complex';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.my.test.Complex.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.test.Complex.prototype.toObject = function(opt_includeInstance) {
  return proto.my.test.Complex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.test.Complex} msg The msg instance to transform.
 * @return {!Object}
 */
proto.my.test.Complex.toObject = function(includeInstance, msg) {
  var f, obj = {
    communiqueList: jspb.Message.toObjectList(msg.getCommuniqueList(),
    proto.my.test.Complex.Communique.toObject, includeInstance),
    compactKeysMap: (f = msg.getCompactKeysMap()) ? f.toObject(includeInstance, undefined) : [],
    multi: (f = msg.getMulti()) && multi_multi1_pb.Multi1.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.test.Complex}
 */
proto.my.test.Complex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.test.Complex;
  return proto.my.test.Complex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.test.Complex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.test.Complex}
 */
proto.my.test.Complex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.my.test.Complex.Communique;
      reader.readMessage(value,proto.my.test.Complex.Communique.deserializeBinaryFromReader);
      msg.addCommunique(value);
      break;
    case 2:
      var value = msg.getCompactKeysMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 3:
      var value = new multi_multi1_pb.Multi1;
      reader.readMessage(value,multi_multi1_pb.Multi1.deserializeBinaryFromReader);
      msg.setMulti(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.test.Complex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.test.Complex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.test.Complex} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.my.test.Complex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommuniqueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.my.test.Complex.Communique.serializeBinaryToWriter
    );
  }
  f = message.getCompactKeysMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMulti();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      multi_multi1_pb.Multi1.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.test.Complex.Communique = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.my.test.Complex.Communique.oneofGroups_);
};
goog.inherits(proto.my.test.Complex.Communique, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.test.Complex.Communique.displayName = 'proto.my.test.Complex.Communique';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.my.test.Complex.Communique.oneofGroups_ = [[2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.my.test.Complex.Communique.UnionThingCase = {
  UNION_THING_NOT_SET: 0,
  NUMBER: 2,
  NAME: 3,
  DATA: 4,
  TEMP_C: 5,
  HEIGHT: 6,
  TODAY: 7,
  MAYBE: 8,
  DELTA: 9
};

/**
 * @return {proto.my.test.Complex.Communique.UnionThingCase}
 */
proto.my.test.Complex.Communique.prototype.getUnionThingCase = function() {
  return /** @type {proto.my.test.Complex.Communique.UnionThingCase} */(jspb.Message.computeOneofCase(this, proto.my.test.Complex.Communique.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.test.Complex.Communique.prototype.toObject = function(opt_includeInstance) {
  return proto.my.test.Complex.Communique.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.test.Complex.Communique} msg The msg instance to transform.
 * @return {!Object}
 */
proto.my.test.Complex.Communique.toObject = function(includeInstance, msg) {
  var f, obj = {
    makeMeCry: jspb.Message.getFieldWithDefault(msg, 1, false),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    data: msg.getData_asB64(),
    tempC: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    height: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    today: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maybe: jspb.Message.getFieldWithDefault(msg, 8, false),
    delta: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.test.Complex.Communique}
 */
proto.my.test.Complex.Communique.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.test.Complex.Communique;
  return proto.my.test.Complex.Communique.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.test.Complex.Communique} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.test.Complex.Communique}
 */
proto.my.test.Complex.Communique.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMakeMeCry(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTempC(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {!proto.my.test.Days} */ (reader.readEnum());
      msg.setToday(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMaybe(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.test.Complex.Communique.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.test.Complex.Communique.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.test.Complex.Communique} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.my.test.Complex.Communique.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakeMeCry();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {!proto.my.test.Days} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeSint32(
      9,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.my.test.Complex.Communique.Delta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.my.test.Complex.Communique.Delta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.my.test.Complex.Communique.Delta.displayName = 'proto.my.test.Complex.Communique.Delta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.my.test.Complex.Communique.Delta.prototype.toObject = function(opt_includeInstance) {
  return proto.my.test.Complex.Communique.Delta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.my.test.Complex.Communique.Delta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.my.test.Complex.Communique.Delta.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.my.test.Complex.Communique.Delta}
 */
proto.my.test.Complex.Communique.Delta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.my.test.Complex.Communique.Delta;
  return proto.my.test.Complex.Communique.Delta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.my.test.Complex.Communique.Delta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.my.test.Complex.Communique.Delta}
 */
proto.my.test.Complex.Communique.Delta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.my.test.Complex.Communique.Delta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.my.test.Complex.Communique.Delta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.my.test.Complex.Communique.Delta} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.my.test.Complex.Communique.Delta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional bool make_me_cry = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.my.test.Complex.Communique.prototype.getMakeMeCry = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.my.test.Complex.Communique.prototype.setMakeMeCry = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 number = 2;
 * @return {number}
 */
proto.my.test.Complex.Communique.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.my.test.Complex.Communique.prototype.setNumber = function(value) {
  jspb.Message.setOneofField(this, 2, proto.my.test.Complex.Communique.oneofGroups_[0], value);
};


proto.my.test.Complex.Communique.prototype.clearNumber = function() {
  jspb.Message.setOneofField(this, 2, proto.my.test.Complex.Communique.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.Communique.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.my.test.Complex.Communique.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.my.test.Complex.Communique.prototype.setName = function(value) {
  jspb.Message.setOneofField(this, 3, proto.my.test.Complex.Communique.oneofGroups_[0], value);
};


proto.my.test.Complex.Communique.prototype.clearName = function() {
  jspb.Message.setOneofField(this, 3, proto.my.test.Complex.Communique.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.Communique.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.my.test.Complex.Communique.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.my.test.Complex.Communique.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.my.test.Complex.Communique.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.my.test.Complex.Communique.prototype.setData = function(value) {
  jspb.Message.setOneofField(this, 4, proto.my.test.Complex.Communique.oneofGroups_[0], value);
};


proto.my.test.Complex.Communique.prototype.clearData = function() {
  jspb.Message.setOneofField(this, 4, proto.my.test.Complex.Communique.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.Communique.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double temp_c = 5;
 * @return {number}
 */
proto.my.test.Complex.Communique.prototype.getTempC = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.my.test.Complex.Communique.prototype.setTempC = function(value) {
  jspb.Message.setOneofField(this, 5, proto.my.test.Complex.Communique.oneofGroups_[0], value);
};


proto.my.test.Complex.Communique.prototype.clearTempC = function() {
  jspb.Message.setOneofField(this, 5, proto.my.test.Complex.Communique.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.Communique.prototype.hasTempC = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float height = 6;
 * @return {number}
 */
proto.my.test.Complex.Communique.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.my.test.Complex.Communique.prototype.setHeight = function(value) {
  jspb.Message.setOneofField(this, 6, proto.my.test.Complex.Communique.oneofGroups_[0], value);
};


proto.my.test.Complex.Communique.prototype.clearHeight = function() {
  jspb.Message.setOneofField(this, 6, proto.my.test.Complex.Communique.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.Communique.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Days today = 7;
 * @return {!proto.my.test.Days}
 */
proto.my.test.Complex.Communique.prototype.getToday = function() {
  return /** @type {!proto.my.test.Days} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.my.test.Days} value */
proto.my.test.Complex.Communique.prototype.setToday = function(value) {
  jspb.Message.setOneofField(this, 7, proto.my.test.Complex.Communique.oneofGroups_[0], value);
};


proto.my.test.Complex.Communique.prototype.clearToday = function() {
  jspb.Message.setOneofField(this, 7, proto.my.test.Complex.Communique.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.Communique.prototype.hasToday = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool maybe = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.my.test.Complex.Communique.prototype.getMaybe = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.my.test.Complex.Communique.prototype.setMaybe = function(value) {
  jspb.Message.setOneofField(this, 8, proto.my.test.Complex.Communique.oneofGroups_[0], value);
};


proto.my.test.Complex.Communique.prototype.clearMaybe = function() {
  jspb.Message.setOneofField(this, 8, proto.my.test.Complex.Communique.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.Communique.prototype.hasMaybe = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional sint32 delta = 9;
 * @return {number}
 */
proto.my.test.Complex.Communique.prototype.getDelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.my.test.Complex.Communique.prototype.setDelta = function(value) {
  jspb.Message.setOneofField(this, 9, proto.my.test.Complex.Communique.oneofGroups_[0], value);
};


proto.my.test.Complex.Communique.prototype.clearDelta = function() {
  jspb.Message.setOneofField(this, 9, proto.my.test.Complex.Communique.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.Communique.prototype.hasDelta = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated Communique communique = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.my.test.Complex.Communique>}
 */
proto.my.test.Complex.prototype.getCommuniqueList = function() {
  return /** @type{!Array.<!proto.my.test.Complex.Communique>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.my.test.Complex.Communique, 1));
};


/** @param {!Array.<!proto.my.test.Complex.Communique>} value */
proto.my.test.Complex.prototype.setCommuniqueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.my.test.Complex.Communique=} opt_value
 * @param {number=} opt_index
 * @return {!proto.my.test.Complex.Communique}
 */
proto.my.test.Complex.prototype.addCommunique = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.my.test.Complex.Communique, opt_index);
};


proto.my.test.Complex.prototype.clearCommuniqueList = function() {
  this.setCommuniqueList([]);
};


/**
 * map<int32, string> compact_keys = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.my.test.Complex.prototype.getCompactKeysMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.my.test.Complex.prototype.clearCompactKeysMap = function() {
  this.getCompactKeysMap().clear();
};


/**
 * optional multitest.Multi1 multi = 3;
 * @return {?proto.multitest.Multi1}
 */
proto.my.test.Complex.prototype.getMulti = function() {
  return /** @type{?proto.multitest.Multi1} */ (
    jspb.Message.getWrapperField(this, multi_multi1_pb.Multi1, 3));
};


/** @param {?proto.multitest.Multi1|undefined} value */
proto.my.test.Complex.prototype.setMulti = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.my.test.Complex.prototype.clearMulti = function() {
  this.setMulti(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.my.test.Complex.prototype.hasMulti = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.my.test.Days = {
  MONDAY: 0,
  TUESDAY: 2,
  LUNDI: 0
};

goog.object.extend(exports, proto.my.test);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = window;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = window.proto.multitest;

/***/ })
/******/ ]);