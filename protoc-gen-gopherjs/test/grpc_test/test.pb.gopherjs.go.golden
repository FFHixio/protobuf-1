// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: grpc_test/test.proto

/*
	Package my_test is a generated protocol buffer package.

	It is generated from these files:
		grpc_test/test.proto

	It has these top-level messages:
		Simple
		Complex
*/
package my_test

import js "github.com/gopherjs/gopherjs/js"
import jspb "github.com/johanbrandhorst/protobuf/jspb"
import multitest2 "github.com/johanbrandhorst/protobuf/protoc-gen-gopherjs/test/multi"

import (
	context "context"
	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion1

// This enum represents days of the week.
type Days int

const (
	Days_MONDAY  Days = 0
	Days_TUESDAY Days = 2
	Days_LUNDI   Days = 0
)

var Days_name = map[int]string{
	0: "MONDAY",
	2: "TUESDAY",
	// Duplicate value: 0: "LUNDI",
}
var Days_value = map[string]int{
	"MONDAY":  0,
	"TUESDAY": 2,
	"LUNDI":   0,
}

func (x Days) String() string {
	return Days_name[int(x)]
}

// Simple is a simple message.
type Simple struct {
	*js.Object
}

// GetKey gets the Key of the Simple.
func (m *Simple) GetKey() (x int64) {
	if m == nil {
		return x
	}
	return m.Call("getKey").Int64()
}

// SetKey sets the Key of the Simple.
func (m *Simple) SetKey(v int64) {
	m.Call("setKey", v)
}

// GetDeadline gets the Deadline of the Simple.
func (m *Simple) GetDeadline() (x float32) {
	if m == nil {
		return x
	}
	return float32(m.Call("getDeadline").Float())
}

// SetDeadline sets the Deadline of the Simple.
func (m *Simple) SetDeadline(v float32) {
	m.Call("setDeadline", v)
}

// GetDay gets the Day of the Simple.
func (m *Simple) GetDay() (x Days) {
	if m == nil {
		return x
	}
	return Days(m.Call("getDay").Int())
}

// SetDay sets the Day of the Simple.
func (m *Simple) SetDay(v Days) {
	m.Call("setDay", v)
}

// GetName gets the Name of the Simple.
func (m *Simple) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Call("getName").String()
}

// SetName sets the Name of the Simple.
func (m *Simple) SetName(v string) {
	m.Call("setName", v)
}

// New creates a new Simple.
func (m *Simple) New(key int64, deadline float32, day Days, name string) *Simple {
	m = &Simple{
		Object: js.Global.Get("proto").Get("my").Get("test").Get("Simple").New([]interface{}{
			key,
			deadline,
			day,
			name,
		}),
	}

	return m
}

// Serialize marshals Simple to a slice of bytes.
func (m *Simple) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a Simple from a slice of bytes.
func (m *Simple) Deserialize(rawBytes []byte) (*Simple, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("my").Get("test").Get("Simple"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &Simple{
		Object: obj,
	}, nil
}

// Complex is a complicated message
type Complex struct {
	*js.Object
}

// GetCommunique gets the Communique of the Complex.
// Warning: mutating the returned slice will not be reflected in the message.
// Use the setter to make changes to the slice in the message.
func (m *Complex) GetCommunique() (x []*Complex_Communique) {
	if m == nil {
		return x
	}
	arrFunc := func(value *js.Object) {
		x = append(x, &Complex_Communique{Object: value})
	}
	m.Call("getCommuniqueList").Call("forEach", arrFunc)
	return x
}

// SetCommunique sets the Communique of the Complex.
func (m *Complex) SetCommunique(v []*Complex_Communique) {
	arr := js.Global.Get("Array").New(len(v))
	for i, value := range v {
		arr.SetIndex(i, value)
	}
	m.Call("setCommuniqueList", arr)
}

// AddCommunique adds an entry to the Communique slice of the Complex
// at the specified index. If index is negative, inserts the element
// at the index counted from the end of the slice, with origin 1.
func (m *Complex) AddCommunique(v *Complex_Communique, index int) {
	m.Call("addCommunique", v, index)
}

// ClearCommunique clears the Communique of the Complex.
func (m *Complex) ClearCommunique() {
	m.Call("clearCommuniqueList")
}

// GetCompactKeys gets the CompactKeys of the Complex.
func (m *Complex) GetCompactKeys() (x map[int32]string) {
	if m == nil {
		return x
	}
	x = map[int32]string{}
	mapFunc := func(value *js.Object, key *js.Object) {
		x[int32(key.Int())] = value.String()
	}
	m.Call("getCompactKeysMap").Call("forEach", mapFunc)
	return x
}

// SetCompactKeys sets the CompactKeys of the Complex.
func (m *Complex) SetCompactKeys(v map[int32]string) {
	m.Call("clearCompactKeysMap")
	mp := m.Call("getCompactKeysMap")
	for key, value := range v {
		mp.Call("set", key, value)
	}
}

// ClearCompactKeys clears the CompactKeys of the Complex.
func (m *Complex) ClearCompactKeys() {
	m.Call("clearCompactKeysMap")
}

// GetMulti gets the Multi of the Complex.
// Multi is imported
func (m *Complex) GetMulti() (x *multitest2.Multi1) {
	if m == nil {
		return x
	}
	return &multitest2.Multi1{Object: m.Call("getMulti")}
}

// SetMulti sets the Multi of the Complex.
// Multi is imported
func (m *Complex) SetMulti(v *multitest2.Multi1) {
	if v != nil {
		m.Call("setMulti", v)
	} else {
		m.ClearMulti()
	}
}

// HasMulti indicates whether the Multi of the Complex is set.
// Multi is imported
func (m *Complex) HasMulti() bool {
	if m == nil {
		return false
	}
	return m.Call("hasMulti").Bool()
}

// ClearMulti clears the Multi of the Complex.
// Multi is imported
func (m *Complex) ClearMulti() {
	m.Call("clearMulti")
}

// New creates a new Complex.
// Multi is imported
func (m *Complex) New(communique []*Complex_Communique, compactKeys map[int32]string, multi *multitest2.Multi1) *Complex {
	m = &Complex{
		Object: js.Global.Get("proto").Get("my").Get("test").Get("Complex").New([]interface{}{
			js.Undefined,
			js.Undefined,
			js.Undefined,
		}),
	}

	arr := js.Global.Get("Array").New(len(communique))
	for i, value := range communique {
		arr.SetIndex(i, value)
	}
	m.Call("setCommuniqueList", arr)

	mp := m.Call("getCompactKeysMap")
	for key, value := range compactKeys {
		mp.Call("set", key, value)
	}

	m.SetMulti(multi)

	return m
}

// Serialize marshals Complex to a slice of bytes.
func (m *Complex) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a Complex from a slice of bytes.
func (m *Complex) Deserialize(rawBytes []byte) (*Complex, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("my").Get("test").Get("Complex"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &Complex{
		Object: obj,
	}, nil
}

type Complex_Communique struct {
	*js.Object
}

// This is a oneof, called "union_thing".
//
// Types that are valid to be assigned to UnionThing:
//	*Complex_Communique_Number
//	*Complex_Communique_Name
//	*Complex_Communique_Data
//	*Complex_Communique_TempC
//	*Complex_Communique_Height
//	*Complex_Communique_Today
//	*Complex_Communique_Maybe
//	*Complex_Communique_Delta_
type isComplex_Communique_UnionThing interface {
	isComplex_Communique_UnionThing()
}

type Complex_Communique_Number struct {
	Number int32
}
type Complex_Communique_Name struct {
	Name string
}
type Complex_Communique_Data struct {
	Data []byte
}
type Complex_Communique_TempC struct {
	TempC float64
}
type Complex_Communique_Height struct {
	Height float32
}
type Complex_Communique_Today struct {
	Today Days
}
type Complex_Communique_Maybe struct {
	Maybe bool
}
type Complex_Communique_Delta_ struct {
	Delta int32
}

func (*Complex_Communique_Number) isComplex_Communique_UnionThing() {}
func (*Complex_Communique_Name) isComplex_Communique_UnionThing()   {}
func (*Complex_Communique_Data) isComplex_Communique_UnionThing()   {}
func (*Complex_Communique_TempC) isComplex_Communique_UnionThing()  {}
func (*Complex_Communique_Height) isComplex_Communique_UnionThing() {}
func (*Complex_Communique_Today) isComplex_Communique_UnionThing()  {}
func (*Complex_Communique_Maybe) isComplex_Communique_UnionThing()  {}
func (*Complex_Communique_Delta_) isComplex_Communique_UnionThing() {}

// GetUnionThing gets the UnionThing of the Complex_Communique.
func (m *Complex_Communique) GetUnionThing() (x isComplex_Communique_UnionThing) {
	switch m.Call("getUnionThingCase").Int() {
	case 2:
		x = &Complex_Communique_Number{
			Number: m.GetNumber(),
		}
	case 3:
		x = &Complex_Communique_Name{
			Name: m.GetName(),
		}
	case 4:
		x = &Complex_Communique_Data{
			Data: m.GetData(),
		}
	case 5:
		x = &Complex_Communique_TempC{
			TempC: m.GetTempC(),
		}
	case 6:
		x = &Complex_Communique_Height{
			Height: m.GetHeight(),
		}
	case 7:
		x = &Complex_Communique_Today{
			Today: m.GetToday(),
		}
	case 8:
		x = &Complex_Communique_Maybe{
			Maybe: m.GetMaybe(),
		}
	case 9:
		x = &Complex_Communique_Delta_{
			Delta: m.GetDelta(),
		}
	}

	return x
}

// SetUnionThing sets the UnionThing of theComplex_Communique.
// If the input is nil, SetUnionThing does nothing.
func (m *Complex_Communique) SetUnionThing(union_thing isComplex_Communique_UnionThing) {
	switch x := union_thing.(type) {
	case *Complex_Communique_Number:
		m.SetNumber(x.Number)
	case *Complex_Communique_Name:
		m.SetName(x.Name)
	case *Complex_Communique_Data:
		m.SetData(x.Data)
	case *Complex_Communique_TempC:
		m.SetTempC(x.TempC)
	case *Complex_Communique_Height:
		m.SetHeight(x.Height)
	case *Complex_Communique_Today:
		m.SetToday(x.Today)
	case *Complex_Communique_Maybe:
		m.SetMaybe(x.Maybe)
	case *Complex_Communique_Delta_:
		m.SetDelta(x.Delta)
	}
}

// GetMakeMeCry gets the MakeMeCry of the Complex_Communique.
func (m *Complex_Communique) GetMakeMeCry() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getMakeMeCry").Bool()
}

// SetMakeMeCry sets the MakeMeCry of the Complex_Communique.
func (m *Complex_Communique) SetMakeMeCry(v bool) {
	m.Call("setMakeMeCry", v)
}

// GetNumber gets the Number of the Complex_Communique.
func (m *Complex_Communique) GetNumber() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getNumber").Int())
}

// SetNumber sets the Number of the Complex_Communique.
func (m *Complex_Communique) SetNumber(v int32) {
	m.Call("setNumber", v)
}

// HasNumber indicates whether the Number of the Complex_Communique is set.
func (m *Complex_Communique) HasNumber() bool {
	if m == nil {
		return false
	}
	return m.Call("hasNumber").Bool()
}

// ClearNumber clears the Number of the Complex_Communique.
func (m *Complex_Communique) ClearNumber() {
	m.Call("clearNumber")
}

// GetName gets the Name of the Complex_Communique.
func (m *Complex_Communique) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Call("getName").String()
}

// SetName sets the Name of the Complex_Communique.
func (m *Complex_Communique) SetName(v string) {
	m.Call("setName", v)
}

// HasName indicates whether the Name of the Complex_Communique is set.
func (m *Complex_Communique) HasName() bool {
	if m == nil {
		return false
	}
	return m.Call("hasName").Bool()
}

// ClearName clears the Name of the Complex_Communique.
func (m *Complex_Communique) ClearName() {
	m.Call("clearName")
}

// GetData gets the Data of the Complex_Communique.
func (m *Complex_Communique) GetData() (x []byte) {
	if m == nil {
		return x
	}
	return m.Call("getData_asU8").Interface().([]byte)
}

// SetData sets the Data of the Complex_Communique.
func (m *Complex_Communique) SetData(v []byte) {
	m.Call("setData", v)
}

// HasData indicates whether the Data of the Complex_Communique is set.
func (m *Complex_Communique) HasData() bool {
	if m == nil {
		return false
	}
	return m.Call("hasData").Bool()
}

// ClearData clears the Data of the Complex_Communique.
func (m *Complex_Communique) ClearData() {
	m.Call("clearData")
}

// GetTempC gets the TempC of the Complex_Communique.
func (m *Complex_Communique) GetTempC() (x float64) {
	if m == nil {
		return x
	}
	return m.Call("getTempC").Float()
}

// SetTempC sets the TempC of the Complex_Communique.
func (m *Complex_Communique) SetTempC(v float64) {
	m.Call("setTempC", v)
}

// HasTempC indicates whether the TempC of the Complex_Communique is set.
func (m *Complex_Communique) HasTempC() bool {
	if m == nil {
		return false
	}
	return m.Call("hasTempC").Bool()
}

// ClearTempC clears the TempC of the Complex_Communique.
func (m *Complex_Communique) ClearTempC() {
	m.Call("clearTempC")
}

// GetHeight gets the Height of the Complex_Communique.
func (m *Complex_Communique) GetHeight() (x float32) {
	if m == nil {
		return x
	}
	return float32(m.Call("getHeight").Float())
}

// SetHeight sets the Height of the Complex_Communique.
func (m *Complex_Communique) SetHeight(v float32) {
	m.Call("setHeight", v)
}

// HasHeight indicates whether the Height of the Complex_Communique is set.
func (m *Complex_Communique) HasHeight() bool {
	if m == nil {
		return false
	}
	return m.Call("hasHeight").Bool()
}

// ClearHeight clears the Height of the Complex_Communique.
func (m *Complex_Communique) ClearHeight() {
	m.Call("clearHeight")
}

// GetToday gets the Today of the Complex_Communique.
func (m *Complex_Communique) GetToday() (x Days) {
	if m == nil {
		return x
	}
	return Days(m.Call("getToday").Int())
}

// SetToday sets the Today of the Complex_Communique.
func (m *Complex_Communique) SetToday(v Days) {
	m.Call("setToday", v)
}

// HasToday indicates whether the Today of the Complex_Communique is set.
func (m *Complex_Communique) HasToday() bool {
	if m == nil {
		return false
	}
	return m.Call("hasToday").Bool()
}

// ClearToday clears the Today of the Complex_Communique.
func (m *Complex_Communique) ClearToday() {
	m.Call("clearToday")
}

// GetMaybe gets the Maybe of the Complex_Communique.
func (m *Complex_Communique) GetMaybe() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getMaybe").Bool()
}

// SetMaybe sets the Maybe of the Complex_Communique.
func (m *Complex_Communique) SetMaybe(v bool) {
	m.Call("setMaybe", v)
}

// HasMaybe indicates whether the Maybe of the Complex_Communique is set.
func (m *Complex_Communique) HasMaybe() bool {
	if m == nil {
		return false
	}
	return m.Call("hasMaybe").Bool()
}

// ClearMaybe clears the Maybe of the Complex_Communique.
func (m *Complex_Communique) ClearMaybe() {
	m.Call("clearMaybe")
}

// GetDelta gets the Delta of the Complex_Communique.
func (m *Complex_Communique) GetDelta() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getDelta").Int())
}

// SetDelta sets the Delta of the Complex_Communique.
func (m *Complex_Communique) SetDelta(v int32) {
	m.Call("setDelta", v)
}

// HasDelta indicates whether the Delta of the Complex_Communique is set.
func (m *Complex_Communique) HasDelta() bool {
	if m == nil {
		return false
	}
	return m.Call("hasDelta").Bool()
}

// ClearDelta clears the Delta of the Complex_Communique.
func (m *Complex_Communique) ClearDelta() {
	m.Call("clearDelta")
}

// New creates a new Complex_Communique.
func (m *Complex_Communique) New(makeMeCry bool, union_thing isComplex_Communique_UnionThing) *Complex_Communique {
	m = &Complex_Communique{
		Object: js.Global.Get("proto").Get("my").Get("test").Get("Complex").Get("Communique").New([]interface{}{
			makeMeCry,
			js.Undefined,
			js.Undefined,
			js.Undefined,
			js.Undefined,
			js.Undefined,
			js.Undefined,
			js.Undefined,
			js.Undefined,
		}),
	}

	m.SetUnionThing(union_thing)

	return m
}

// Serialize marshals Complex_Communique to a slice of bytes.
func (m *Complex_Communique) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a Complex_Communique from a slice of bytes.
func (m *Complex_Communique) Deserialize(rawBytes []byte) (*Complex_Communique, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("my").Get("test").Get("Complex").Get("Communique"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &Complex_Communique{
		Object: obj,
	}, nil
}

type Complex_Communique_Delta struct {
	*js.Object
}

// New creates a new Complex_Communique_Delta.
func (m *Complex_Communique_Delta) New() *Complex_Communique_Delta {
	m = &Complex_Communique_Delta{
		Object: js.Global.Get("proto").Get("my").Get("test").Get("Complex").Get("Communique").Get("Delta").New([]interface{}{}),
	}

	return m
}

// Serialize marshals Complex_Communique_Delta to a slice of bytes.
func (m *Complex_Communique_Delta) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a Complex_Communique_Delta from a slice of bytes.
func (m *Complex_Communique_Delta) Deserialize(rawBytes []byte) (*Complex_Communique_Delta, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("my").Get("test").Get("Complex").Get("Communique").Get("Delta"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &Complex_Communique_Delta{
		Object: obj,
	}, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion1

// Client API for TestService service

// This is a TestService
type TestServiceClient interface {
	Unary(ctx context.Context, in *Simple, opts ...grpcweb.CallOption) (*Complex, error)
	ServerStreaming(ctx context.Context, in *Simple, opts ...grpcweb.CallOption) (TestService_ServerStreamingClient, error)
}

type testServiceClient struct {
	client *grpcweb.Client
}

// NewTestServiceClient creates a new gRPC-Web client.
func NewTestServiceClient(hostname string, opts ...grpcweb.DialOption) TestServiceClient {
	return &testServiceClient{
		client: grpcweb.NewClient(hostname, "my.test.TestService", opts...),
	}
}

func (c *testServiceClient) Unary(ctx context.Context, in *Simple, opts ...grpcweb.CallOption) (*Complex, error) {
	req := in.Serialize()

	resp, err := c.client.RPCCall(ctx, "Unary", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(Complex).Deserialize(resp)
}

func (c *testServiceClient) ServerStreaming(ctx context.Context, in *Simple, opts ...grpcweb.CallOption) (TestService_ServerStreamingClient, error) {
	req := in.Serialize()

	srv, err := c.client.Stream(ctx, "ServerStreaming", req, opts...)
	if err != nil {
		return nil, err
	}

	return &testServiceServerStreamingClient{
		stream: srv,
	}, nil
}

type TestService_ServerStreamingClient interface {
	Recv() (*Complex, error)
}

type testServiceServerStreamingClient struct {
	stream *grpcweb.StreamClient
}

func (x *testServiceServerStreamingClient) Recv() (*Complex, error) {
	resp, err := x.stream.Recv()
	if err != nil {
		return nil, err
	}

	return new(Complex).Deserialize(resp)
}
