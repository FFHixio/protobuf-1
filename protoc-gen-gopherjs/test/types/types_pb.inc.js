/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = __webpack_require__(1);
var goog = jspb;
var global = Function('return this')();

var multi_multi1_pb = __webpack_require__(2);
goog.exportSymbol('proto.types.ForeignEnum', null, global);
goog.exportSymbol('proto.types.ForeignMessage', null, global);
goog.exportSymbol('proto.types.MapEnum', null, global);
goog.exportSymbol('proto.types.NestedTestAllTypes', null, global);
goog.exportSymbol('proto.types.TestAllTypes', null, global);
goog.exportSymbol('proto.types.TestAllTypes.NestedEnum', null, global);
goog.exportSymbol('proto.types.TestAllTypes.NestedMessage', null, global);
goog.exportSymbol('proto.types.TestMap', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TestAllTypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.TestAllTypes.repeatedFields_, proto.types.TestAllTypes.oneofGroups_);
};
goog.inherits(proto.types.TestAllTypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TestAllTypes.displayName = 'proto.types.TestAllTypes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.TestAllTypes.repeatedFields_ = [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,52];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.types.TestAllTypes.oneofGroups_ = [[111,112,113,114,115]];

/**
 * @enum {number}
 */
proto.types.TestAllTypes.OneofFieldCase = {
  ONEOF_FIELD_NOT_SET: 0,
  ONEOF_UINT32: 111,
  ONEOF_NESTED_MESSAGE: 112,
  ONEOF_STRING: 113,
  ONEOF_BYTES: 114,
  ONEOF_IMPORTED_MESSAGE: 115
};

/**
 * @return {proto.types.TestAllTypes.OneofFieldCase}
 */
proto.types.TestAllTypes.prototype.getOneofFieldCase = function() {
  return /** @type {proto.types.TestAllTypes.OneofFieldCase} */(jspb.Message.computeOneofCase(this, proto.types.TestAllTypes.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TestAllTypes.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TestAllTypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TestAllTypes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.types.TestAllTypes.toObject = function(includeInstance, msg) {
  var f, obj = {
    singleInt32: jspb.Message.getFieldWithDefault(msg, 1, 0),
    singleInt64: jspb.Message.getFieldWithDefault(msg, 2, 0),
    singleUint32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    singleUint64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    singleSint32: jspb.Message.getFieldWithDefault(msg, 5, 0),
    singleSint64: jspb.Message.getFieldWithDefault(msg, 6, 0),
    singleFixed32: jspb.Message.getFieldWithDefault(msg, 7, 0),
    singleFixed64: jspb.Message.getFieldWithDefault(msg, 8, 0),
    singleSfixed32: jspb.Message.getFieldWithDefault(msg, 9, 0),
    singleSfixed64: jspb.Message.getFieldWithDefault(msg, 10, 0),
    singleFloat: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    singleDouble: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    singleBool: jspb.Message.getFieldWithDefault(msg, 13, false),
    singleString: jspb.Message.getFieldWithDefault(msg, 14, ""),
    singleBytes: msg.getSingleBytes_asB64(),
    singleImportedMessage: (f = msg.getSingleImportedMessage()) && multi_multi1_pb.Multi1.toObject(includeInstance, f),
    singleNestedMessage: (f = msg.getSingleNestedMessage()) && proto.types.TestAllTypes.NestedMessage.toObject(includeInstance, f),
    singleForeignMessage: (f = msg.getSingleForeignMessage()) && proto.types.ForeignMessage.toObject(includeInstance, f),
    singleNestedEnum: jspb.Message.getFieldWithDefault(msg, 21, 0),
    singleForeignEnum: jspb.Message.getFieldWithDefault(msg, 22, 0),
    repeatedInt32List: jspb.Message.getField(msg, 31),
    repeatedInt64List: jspb.Message.getField(msg, 32),
    repeatedUint32List: jspb.Message.getField(msg, 33),
    repeatedUint64List: jspb.Message.getField(msg, 34),
    repeatedSint32List: jspb.Message.getField(msg, 35),
    repeatedSint64List: jspb.Message.getField(msg, 36),
    repeatedFixed32List: jspb.Message.getField(msg, 37),
    repeatedFixed64List: jspb.Message.getField(msg, 38),
    repeatedSfixed32List: jspb.Message.getField(msg, 39),
    repeatedSfixed64List: jspb.Message.getField(msg, 40),
    repeatedFloatList: jspb.Message.getRepeatedFloatingPointField(msg, 41),
    repeatedDoubleList: jspb.Message.getRepeatedFloatingPointField(msg, 42),
    repeatedBoolList: jspb.Message.getField(msg, 43),
    repeatedStringList: jspb.Message.getField(msg, 44),
    repeatedBytesList: msg.getRepeatedBytesList_asB64(),
    repeatedImportedMessageList: jspb.Message.toObjectList(msg.getRepeatedImportedMessageList(),
    multi_multi1_pb.Multi1.toObject, includeInstance),
    repeatedNestedMessageList: jspb.Message.toObjectList(msg.getRepeatedNestedMessageList(),
    proto.types.TestAllTypes.NestedMessage.toObject, includeInstance),
    repeatedForeignMessageList: jspb.Message.toObjectList(msg.getRepeatedForeignMessageList(),
    proto.types.ForeignMessage.toObject, includeInstance),
    repeatedNestedEnumList: jspb.Message.getField(msg, 51),
    repeatedForeignEnumList: jspb.Message.getField(msg, 52),
    oneofUint32: jspb.Message.getFieldWithDefault(msg, 111, 0),
    oneofNestedMessage: (f = msg.getOneofNestedMessage()) && proto.types.TestAllTypes.NestedMessage.toObject(includeInstance, f),
    oneofString: jspb.Message.getFieldWithDefault(msg, 113, ""),
    oneofBytes: msg.getOneofBytes_asB64(),
    oneofImportedMessage: (f = msg.getOneofImportedMessage()) && multi_multi1_pb.Multi1.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TestAllTypes}
 */
proto.types.TestAllTypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TestAllTypes;
  return proto.types.TestAllTypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TestAllTypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TestAllTypes}
 */
proto.types.TestAllTypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSingleInt32(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSingleInt64(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSingleUint32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSingleUint64(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSingleSint32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSingleSint64(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSingleFixed32(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setSingleFixed64(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSfixed32());
      msg.setSingleSfixed32(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setSingleSfixed64(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSingleFloat(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSingleDouble(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSingleBool(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSingleString(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSingleBytes(value);
      break;
    case 16:
      var value = new multi_multi1_pb.Multi1;
      reader.readMessage(value,multi_multi1_pb.Multi1.deserializeBinaryFromReader);
      msg.setSingleImportedMessage(value);
      break;
    case 18:
      var value = new proto.types.TestAllTypes.NestedMessage;
      reader.readMessage(value,proto.types.TestAllTypes.NestedMessage.deserializeBinaryFromReader);
      msg.setSingleNestedMessage(value);
      break;
    case 19:
      var value = new proto.types.ForeignMessage;
      reader.readMessage(value,proto.types.ForeignMessage.deserializeBinaryFromReader);
      msg.setSingleForeignMessage(value);
      break;
    case 21:
      var value = /** @type {!proto.types.TestAllTypes.NestedEnum} */ (reader.readEnum());
      msg.setSingleNestedEnum(value);
      break;
    case 22:
      var value = /** @type {!proto.types.ForeignEnum} */ (reader.readEnum());
      msg.setSingleForeignEnum(value);
      break;
    case 31:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setRepeatedInt32List(value);
      break;
    case 32:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setRepeatedInt64List(value);
      break;
    case 33:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setRepeatedUint32List(value);
      break;
    case 34:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setRepeatedUint64List(value);
      break;
    case 35:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setRepeatedSint32List(value);
      break;
    case 36:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint64());
      msg.setRepeatedSint64List(value);
      break;
    case 37:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFixed32());
      msg.setRepeatedFixed32List(value);
      break;
    case 38:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFixed64());
      msg.setRepeatedFixed64List(value);
      break;
    case 39:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSfixed32());
      msg.setRepeatedSfixed32List(value);
      break;
    case 40:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSfixed64());
      msg.setRepeatedSfixed64List(value);
      break;
    case 41:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setRepeatedFloatList(value);
      break;
    case 42:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setRepeatedDoubleList(value);
      break;
    case 43:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setRepeatedBoolList(value);
      break;
    case 44:
      var value = /** @type {string} */ (reader.readString());
      msg.addRepeatedString(value);
      break;
    case 45:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRepeatedBytes(value);
      break;
    case 46:
      var value = new multi_multi1_pb.Multi1;
      reader.readMessage(value,multi_multi1_pb.Multi1.deserializeBinaryFromReader);
      msg.addRepeatedImportedMessage(value);
      break;
    case 48:
      var value = new proto.types.TestAllTypes.NestedMessage;
      reader.readMessage(value,proto.types.TestAllTypes.NestedMessage.deserializeBinaryFromReader);
      msg.addRepeatedNestedMessage(value);
      break;
    case 49:
      var value = new proto.types.ForeignMessage;
      reader.readMessage(value,proto.types.ForeignMessage.deserializeBinaryFromReader);
      msg.addRepeatedForeignMessage(value);
      break;
    case 51:
      var value = /** @type {!Array.<!proto.types.TestAllTypes.NestedEnum>} */ (reader.readPackedEnum());
      msg.setRepeatedNestedEnumList(value);
      break;
    case 52:
      var value = /** @type {!Array.<!proto.types.ForeignEnum>} */ (reader.readPackedEnum());
      msg.setRepeatedForeignEnumList(value);
      break;
    case 111:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOneofUint32(value);
      break;
    case 112:
      var value = new proto.types.TestAllTypes.NestedMessage;
      reader.readMessage(value,proto.types.TestAllTypes.NestedMessage.deserializeBinaryFromReader);
      msg.setOneofNestedMessage(value);
      break;
    case 113:
      var value = /** @type {string} */ (reader.readString());
      msg.setOneofString(value);
      break;
    case 114:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOneofBytes(value);
      break;
    case 115:
      var value = new multi_multi1_pb.Multi1;
      reader.readMessage(value,multi_multi1_pb.Multi1.deserializeBinaryFromReader);
      msg.setOneofImportedMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TestAllTypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TestAllTypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TestAllTypes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.types.TestAllTypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSingleInt32();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSingleInt64();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSingleUint32();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSingleUint64();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSingleSint32();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getSingleSint64();
  if (f !== 0) {
    writer.writeSint64(
      6,
      f
    );
  }
  f = message.getSingleFixed32();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getSingleFixed64();
  if (f !== 0) {
    writer.writeFixed64(
      8,
      f
    );
  }
  f = message.getSingleSfixed32();
  if (f !== 0) {
    writer.writeSfixed32(
      9,
      f
    );
  }
  f = message.getSingleSfixed64();
  if (f !== 0) {
    writer.writeSfixed64(
      10,
      f
    );
  }
  f = message.getSingleFloat();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getSingleDouble();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getSingleBool();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getSingleString();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getSingleBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getSingleImportedMessage();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      multi_multi1_pb.Multi1.serializeBinaryToWriter
    );
  }
  f = message.getSingleNestedMessage();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.types.TestAllTypes.NestedMessage.serializeBinaryToWriter
    );
  }
  f = message.getSingleForeignMessage();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.types.ForeignMessage.serializeBinaryToWriter
    );
  }
  f = message.getSingleNestedEnum();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getSingleForeignEnum();
  if (f !== 0.0) {
    writer.writeEnum(
      22,
      f
    );
  }
  f = message.getRepeatedInt32List();
  if (f.length > 0) {
    writer.writePackedInt32(
      31,
      f
    );
  }
  f = message.getRepeatedInt64List();
  if (f.length > 0) {
    writer.writePackedInt64(
      32,
      f
    );
  }
  f = message.getRepeatedUint32List();
  if (f.length > 0) {
    writer.writePackedUint32(
      33,
      f
    );
  }
  f = message.getRepeatedUint64List();
  if (f.length > 0) {
    writer.writePackedUint64(
      34,
      f
    );
  }
  f = message.getRepeatedSint32List();
  if (f.length > 0) {
    writer.writePackedSint32(
      35,
      f
    );
  }
  f = message.getRepeatedSint64List();
  if (f.length > 0) {
    writer.writePackedSint64(
      36,
      f
    );
  }
  f = message.getRepeatedFixed32List();
  if (f.length > 0) {
    writer.writePackedFixed32(
      37,
      f
    );
  }
  f = message.getRepeatedFixed64List();
  if (f.length > 0) {
    writer.writePackedFixed64(
      38,
      f
    );
  }
  f = message.getRepeatedSfixed32List();
  if (f.length > 0) {
    writer.writePackedSfixed32(
      39,
      f
    );
  }
  f = message.getRepeatedSfixed64List();
  if (f.length > 0) {
    writer.writePackedSfixed64(
      40,
      f
    );
  }
  f = message.getRepeatedFloatList();
  if (f.length > 0) {
    writer.writePackedFloat(
      41,
      f
    );
  }
  f = message.getRepeatedDoubleList();
  if (f.length > 0) {
    writer.writePackedDouble(
      42,
      f
    );
  }
  f = message.getRepeatedBoolList();
  if (f.length > 0) {
    writer.writePackedBool(
      43,
      f
    );
  }
  f = message.getRepeatedStringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      44,
      f
    );
  }
  f = message.getRepeatedBytesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      45,
      f
    );
  }
  f = message.getRepeatedImportedMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      46,
      f,
      multi_multi1_pb.Multi1.serializeBinaryToWriter
    );
  }
  f = message.getRepeatedNestedMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      48,
      f,
      proto.types.TestAllTypes.NestedMessage.serializeBinaryToWriter
    );
  }
  f = message.getRepeatedForeignMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      49,
      f,
      proto.types.ForeignMessage.serializeBinaryToWriter
    );
  }
  f = message.getRepeatedNestedEnumList();
  if (f.length > 0) {
    writer.writePackedEnum(
      51,
      f
    );
  }
  f = message.getRepeatedForeignEnumList();
  if (f.length > 0) {
    writer.writePackedEnum(
      52,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 111));
  if (f != null) {
    writer.writeUint32(
      111,
      f
    );
  }
  f = message.getOneofNestedMessage();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      proto.types.TestAllTypes.NestedMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 113));
  if (f != null) {
    writer.writeString(
      113,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 114));
  if (f != null) {
    writer.writeBytes(
      114,
      f
    );
  }
  f = message.getOneofImportedMessage();
  if (f != null) {
    writer.writeMessage(
      115,
      f,
      multi_multi1_pb.Multi1.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.types.TestAllTypes.NestedEnum = {
  NESTED_ENUM_UNSPECIFIED: 0,
  FOO: 1,
  BAR: 2,
  BAZ: 3,
  NEG: -1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TestAllTypes.NestedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TestAllTypes.NestedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TestAllTypes.NestedMessage.displayName = 'proto.types.TestAllTypes.NestedMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TestAllTypes.NestedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TestAllTypes.NestedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TestAllTypes.NestedMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.types.TestAllTypes.NestedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    b: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TestAllTypes.NestedMessage}
 */
proto.types.TestAllTypes.NestedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TestAllTypes.NestedMessage;
  return proto.types.TestAllTypes.NestedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TestAllTypes.NestedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TestAllTypes.NestedMessage}
 */
proto.types.TestAllTypes.NestedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TestAllTypes.NestedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TestAllTypes.NestedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TestAllTypes.NestedMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.types.TestAllTypes.NestedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getB();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 b = 1;
 * @return {number}
 */
proto.types.TestAllTypes.NestedMessage.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.NestedMessage.prototype.setB = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 single_int32 = 1;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleInt32 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 single_int64 = 2;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleInt64 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 single_uint32 = 3;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleUint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleUint32 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 single_uint64 = 4;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleUint64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleUint64 = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional sint32 single_sint32 = 5;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleSint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleSint32 = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional sint64 single_sint64 = 6;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleSint64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleSint64 = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional fixed32 single_fixed32 = 7;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleFixed32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleFixed32 = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional fixed64 single_fixed64 = 8;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleFixed64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleFixed64 = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional sfixed32 single_sfixed32 = 9;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleSfixed32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleSfixed32 = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional sfixed64 single_sfixed64 = 10;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleSfixed64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleSfixed64 = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional float single_float = 11;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleFloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleFloat = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional double single_double = 12;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getSingleDouble = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setSingleDouble = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bool single_bool = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.types.TestAllTypes.prototype.getSingleBool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.types.TestAllTypes.prototype.setSingleBool = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string single_string = 14;
 * @return {string}
 */
proto.types.TestAllTypes.prototype.getSingleString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.types.TestAllTypes.prototype.setSingleString = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional bytes single_bytes = 15;
 * @return {!(string|Uint8Array)}
 */
proto.types.TestAllTypes.prototype.getSingleBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes single_bytes = 15;
 * This is a type-conversion wrapper around `getSingleBytes()`
 * @return {string}
 */
proto.types.TestAllTypes.prototype.getSingleBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSingleBytes()));
};


/**
 * optional bytes single_bytes = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSingleBytes()`
 * @return {!Uint8Array}
 */
proto.types.TestAllTypes.prototype.getSingleBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSingleBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TestAllTypes.prototype.setSingleBytes = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional multitest.Multi1 single_imported_message = 16;
 * @return {?proto.multitest.Multi1}
 */
proto.types.TestAllTypes.prototype.getSingleImportedMessage = function() {
  return /** @type{?proto.multitest.Multi1} */ (
    jspb.Message.getWrapperField(this, multi_multi1_pb.Multi1, 16));
};


/** @param {?proto.multitest.Multi1|undefined} value */
proto.types.TestAllTypes.prototype.setSingleImportedMessage = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.types.TestAllTypes.prototype.clearSingleImportedMessage = function() {
  this.setSingleImportedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TestAllTypes.prototype.hasSingleImportedMessage = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional NestedMessage single_nested_message = 18;
 * @return {?proto.types.TestAllTypes.NestedMessage}
 */
proto.types.TestAllTypes.prototype.getSingleNestedMessage = function() {
  return /** @type{?proto.types.TestAllTypes.NestedMessage} */ (
    jspb.Message.getWrapperField(this, proto.types.TestAllTypes.NestedMessage, 18));
};


/** @param {?proto.types.TestAllTypes.NestedMessage|undefined} value */
proto.types.TestAllTypes.prototype.setSingleNestedMessage = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.types.TestAllTypes.prototype.clearSingleNestedMessage = function() {
  this.setSingleNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TestAllTypes.prototype.hasSingleNestedMessage = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ForeignMessage single_foreign_message = 19;
 * @return {?proto.types.ForeignMessage}
 */
proto.types.TestAllTypes.prototype.getSingleForeignMessage = function() {
  return /** @type{?proto.types.ForeignMessage} */ (
    jspb.Message.getWrapperField(this, proto.types.ForeignMessage, 19));
};


/** @param {?proto.types.ForeignMessage|undefined} value */
proto.types.TestAllTypes.prototype.setSingleForeignMessage = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.types.TestAllTypes.prototype.clearSingleForeignMessage = function() {
  this.setSingleForeignMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TestAllTypes.prototype.hasSingleForeignMessage = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional NestedEnum single_nested_enum = 21;
 * @return {!proto.types.TestAllTypes.NestedEnum}
 */
proto.types.TestAllTypes.prototype.getSingleNestedEnum = function() {
  return /** @type {!proto.types.TestAllTypes.NestedEnum} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {!proto.types.TestAllTypes.NestedEnum} value */
proto.types.TestAllTypes.prototype.setSingleNestedEnum = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional ForeignEnum single_foreign_enum = 22;
 * @return {!proto.types.ForeignEnum}
 */
proto.types.TestAllTypes.prototype.getSingleForeignEnum = function() {
  return /** @type {!proto.types.ForeignEnum} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {!proto.types.ForeignEnum} value */
proto.types.TestAllTypes.prototype.setSingleForeignEnum = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * repeated int32 repeated_int32 = 31;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedInt32List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 31));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedInt32List = function(value) {
  jspb.Message.setField(this, 31, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedInt32 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 31, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedInt32List = function() {
  this.setRepeatedInt32List([]);
};


/**
 * repeated int64 repeated_int64 = 32;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedInt64List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 32));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedInt64List = function(value) {
  jspb.Message.setField(this, 32, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedInt64 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 32, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedInt64List = function() {
  this.setRepeatedInt64List([]);
};


/**
 * repeated uint32 repeated_uint32 = 33;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedUint32List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 33));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedUint32List = function(value) {
  jspb.Message.setField(this, 33, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedUint32 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 33, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedUint32List = function() {
  this.setRepeatedUint32List([]);
};


/**
 * repeated uint64 repeated_uint64 = 34;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedUint64List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 34));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedUint64List = function(value) {
  jspb.Message.setField(this, 34, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedUint64 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 34, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedUint64List = function() {
  this.setRepeatedUint64List([]);
};


/**
 * repeated sint32 repeated_sint32 = 35;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedSint32List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 35));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedSint32List = function(value) {
  jspb.Message.setField(this, 35, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedSint32 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 35, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedSint32List = function() {
  this.setRepeatedSint32List([]);
};


/**
 * repeated sint64 repeated_sint64 = 36;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedSint64List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 36));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedSint64List = function(value) {
  jspb.Message.setField(this, 36, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedSint64 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 36, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedSint64List = function() {
  this.setRepeatedSint64List([]);
};


/**
 * repeated fixed32 repeated_fixed32 = 37;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedFixed32List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 37));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedFixed32List = function(value) {
  jspb.Message.setField(this, 37, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedFixed32 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 37, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedFixed32List = function() {
  this.setRepeatedFixed32List([]);
};


/**
 * repeated fixed64 repeated_fixed64 = 38;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedFixed64List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 38));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedFixed64List = function(value) {
  jspb.Message.setField(this, 38, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedFixed64 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 38, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedFixed64List = function() {
  this.setRepeatedFixed64List([]);
};


/**
 * repeated sfixed32 repeated_sfixed32 = 39;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedSfixed32List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 39));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedSfixed32List = function(value) {
  jspb.Message.setField(this, 39, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedSfixed32 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 39, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedSfixed32List = function() {
  this.setRepeatedSfixed32List([]);
};


/**
 * repeated sfixed64 repeated_sfixed64 = 40;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedSfixed64List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 40));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedSfixed64List = function(value) {
  jspb.Message.setField(this, 40, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedSfixed64 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 40, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedSfixed64List = function() {
  this.setRepeatedSfixed64List([]);
};


/**
 * repeated float repeated_float = 41;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedFloatList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 41));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedFloatList = function(value) {
  jspb.Message.setField(this, 41, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedFloat = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 41, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedFloatList = function() {
  this.setRepeatedFloatList([]);
};


/**
 * repeated double repeated_double = 42;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.types.TestAllTypes.prototype.getRepeatedDoubleList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 42));
};


/** @param {!Array.<number>} value */
proto.types.TestAllTypes.prototype.setRepeatedDoubleList = function(value) {
  jspb.Message.setField(this, 42, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedDouble = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 42, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedDoubleList = function() {
  this.setRepeatedDoubleList([]);
};


/**
 * repeated bool repeated_bool = 43;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<boolean>}
 */
proto.types.TestAllTypes.prototype.getRepeatedBoolList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getField(this, 43));
};


/** @param {!Array.<boolean>} value */
proto.types.TestAllTypes.prototype.setRepeatedBoolList = function(value) {
  jspb.Message.setField(this, 43, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedBool = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 43, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedBoolList = function() {
  this.setRepeatedBoolList([]);
};


/**
 * repeated string repeated_string = 44;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.types.TestAllTypes.prototype.getRepeatedStringList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 44));
};


/** @param {!Array.<string>} value */
proto.types.TestAllTypes.prototype.setRepeatedStringList = function(value) {
  jspb.Message.setField(this, 44, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedString = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 44, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedStringList = function() {
  this.setRepeatedStringList([]);
};


/**
 * repeated bytes repeated_bytes = 45;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.TestAllTypes.prototype.getRepeatedBytesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 45));
};


/**
 * repeated bytes repeated_bytes = 45;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getRepeatedBytesList()`
 * @return {!Array.<string>}
 */
proto.types.TestAllTypes.prototype.getRepeatedBytesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getRepeatedBytesList()));
};


/**
 * repeated bytes repeated_bytes = 45;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRepeatedBytesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.types.TestAllTypes.prototype.getRepeatedBytesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRepeatedBytesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.TestAllTypes.prototype.setRepeatedBytesList = function(value) {
  jspb.Message.setField(this, 45, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedBytes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 45, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedBytesList = function() {
  this.setRepeatedBytesList([]);
};


/**
 * repeated multitest.Multi1 repeated_imported_message = 46;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.multitest.Multi1>}
 */
proto.types.TestAllTypes.prototype.getRepeatedImportedMessageList = function() {
  return /** @type{!Array.<!proto.multitest.Multi1>} */ (
    jspb.Message.getRepeatedWrapperField(this, multi_multi1_pb.Multi1, 46));
};


/** @param {!Array.<!proto.multitest.Multi1>} value */
proto.types.TestAllTypes.prototype.setRepeatedImportedMessageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 46, value);
};


/**
 * @param {!proto.multitest.Multi1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.multitest.Multi1}
 */
proto.types.TestAllTypes.prototype.addRepeatedImportedMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 46, opt_value, proto.multitest.Multi1, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedImportedMessageList = function() {
  this.setRepeatedImportedMessageList([]);
};


/**
 * repeated NestedMessage repeated_nested_message = 48;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.types.TestAllTypes.NestedMessage>}
 */
proto.types.TestAllTypes.prototype.getRepeatedNestedMessageList = function() {
  return /** @type{!Array.<!proto.types.TestAllTypes.NestedMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.TestAllTypes.NestedMessage, 48));
};


/** @param {!Array.<!proto.types.TestAllTypes.NestedMessage>} value */
proto.types.TestAllTypes.prototype.setRepeatedNestedMessageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 48, value);
};


/**
 * @param {!proto.types.TestAllTypes.NestedMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.TestAllTypes.NestedMessage}
 */
proto.types.TestAllTypes.prototype.addRepeatedNestedMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 48, opt_value, proto.types.TestAllTypes.NestedMessage, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedNestedMessageList = function() {
  this.setRepeatedNestedMessageList([]);
};


/**
 * repeated ForeignMessage repeated_foreign_message = 49;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.types.ForeignMessage>}
 */
proto.types.TestAllTypes.prototype.getRepeatedForeignMessageList = function() {
  return /** @type{!Array.<!proto.types.ForeignMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.ForeignMessage, 49));
};


/** @param {!Array.<!proto.types.ForeignMessage>} value */
proto.types.TestAllTypes.prototype.setRepeatedForeignMessageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 49, value);
};


/**
 * @param {!proto.types.ForeignMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.ForeignMessage}
 */
proto.types.TestAllTypes.prototype.addRepeatedForeignMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 49, opt_value, proto.types.ForeignMessage, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedForeignMessageList = function() {
  this.setRepeatedForeignMessageList([]);
};


/**
 * repeated NestedEnum repeated_nested_enum = 51;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.types.TestAllTypes.NestedEnum>}
 */
proto.types.TestAllTypes.prototype.getRepeatedNestedEnumList = function() {
  return /** @type {!Array.<!proto.types.TestAllTypes.NestedEnum>} */ (jspb.Message.getField(this, 51));
};


/** @param {!Array.<!proto.types.TestAllTypes.NestedEnum>} value */
proto.types.TestAllTypes.prototype.setRepeatedNestedEnumList = function(value) {
  jspb.Message.setField(this, 51, value || []);
};


/**
 * @param {!proto.types.TestAllTypes.NestedEnum} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedNestedEnum = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 51, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedNestedEnumList = function() {
  this.setRepeatedNestedEnumList([]);
};


/**
 * repeated ForeignEnum repeated_foreign_enum = 52;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.types.ForeignEnum>}
 */
proto.types.TestAllTypes.prototype.getRepeatedForeignEnumList = function() {
  return /** @type {!Array.<!proto.types.ForeignEnum>} */ (jspb.Message.getField(this, 52));
};


/** @param {!Array.<!proto.types.ForeignEnum>} value */
proto.types.TestAllTypes.prototype.setRepeatedForeignEnumList = function(value) {
  jspb.Message.setField(this, 52, value || []);
};


/**
 * @param {!proto.types.ForeignEnum} value
 * @param {number=} opt_index
 */
proto.types.TestAllTypes.prototype.addRepeatedForeignEnum = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 52, value, opt_index);
};


proto.types.TestAllTypes.prototype.clearRepeatedForeignEnumList = function() {
  this.setRepeatedForeignEnumList([]);
};


/**
 * optional uint32 oneof_uint32 = 111;
 * @return {number}
 */
proto.types.TestAllTypes.prototype.getOneofUint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 111, 0));
};


/** @param {number} value */
proto.types.TestAllTypes.prototype.setOneofUint32 = function(value) {
  jspb.Message.setOneofField(this, 111, proto.types.TestAllTypes.oneofGroups_[0], value);
};


proto.types.TestAllTypes.prototype.clearOneofUint32 = function() {
  jspb.Message.setOneofField(this, 111, proto.types.TestAllTypes.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TestAllTypes.prototype.hasOneofUint32 = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional NestedMessage oneof_nested_message = 112;
 * @return {?proto.types.TestAllTypes.NestedMessage}
 */
proto.types.TestAllTypes.prototype.getOneofNestedMessage = function() {
  return /** @type{?proto.types.TestAllTypes.NestedMessage} */ (
    jspb.Message.getWrapperField(this, proto.types.TestAllTypes.NestedMessage, 112));
};


/** @param {?proto.types.TestAllTypes.NestedMessage|undefined} value */
proto.types.TestAllTypes.prototype.setOneofNestedMessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 112, proto.types.TestAllTypes.oneofGroups_[0], value);
};


proto.types.TestAllTypes.prototype.clearOneofNestedMessage = function() {
  this.setOneofNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TestAllTypes.prototype.hasOneofNestedMessage = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional string oneof_string = 113;
 * @return {string}
 */
proto.types.TestAllTypes.prototype.getOneofString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 113, ""));
};


/** @param {string} value */
proto.types.TestAllTypes.prototype.setOneofString = function(value) {
  jspb.Message.setOneofField(this, 113, proto.types.TestAllTypes.oneofGroups_[0], value);
};


proto.types.TestAllTypes.prototype.clearOneofString = function() {
  jspb.Message.setOneofField(this, 113, proto.types.TestAllTypes.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TestAllTypes.prototype.hasOneofString = function() {
  return jspb.Message.getField(this, 113) != null;
};


/**
 * optional bytes oneof_bytes = 114;
 * @return {!(string|Uint8Array)}
 */
proto.types.TestAllTypes.prototype.getOneofBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 114, ""));
};


/**
 * optional bytes oneof_bytes = 114;
 * This is a type-conversion wrapper around `getOneofBytes()`
 * @return {string}
 */
proto.types.TestAllTypes.prototype.getOneofBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOneofBytes()));
};


/**
 * optional bytes oneof_bytes = 114;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOneofBytes()`
 * @return {!Uint8Array}
 */
proto.types.TestAllTypes.prototype.getOneofBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOneofBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TestAllTypes.prototype.setOneofBytes = function(value) {
  jspb.Message.setOneofField(this, 114, proto.types.TestAllTypes.oneofGroups_[0], value);
};


proto.types.TestAllTypes.prototype.clearOneofBytes = function() {
  jspb.Message.setOneofField(this, 114, proto.types.TestAllTypes.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TestAllTypes.prototype.hasOneofBytes = function() {
  return jspb.Message.getField(this, 114) != null;
};


/**
 * optional multitest.Multi1 oneof_imported_message = 115;
 * @return {?proto.multitest.Multi1}
 */
proto.types.TestAllTypes.prototype.getOneofImportedMessage = function() {
  return /** @type{?proto.multitest.Multi1} */ (
    jspb.Message.getWrapperField(this, multi_multi1_pb.Multi1, 115));
};


/** @param {?proto.multitest.Multi1|undefined} value */
proto.types.TestAllTypes.prototype.setOneofImportedMessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 115, proto.types.TestAllTypes.oneofGroups_[0], value);
};


proto.types.TestAllTypes.prototype.clearOneofImportedMessage = function() {
  this.setOneofImportedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TestAllTypes.prototype.hasOneofImportedMessage = function() {
  return jspb.Message.getField(this, 115) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.NestedTestAllTypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.NestedTestAllTypes.repeatedFields_, null);
};
goog.inherits(proto.types.NestedTestAllTypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.NestedTestAllTypes.displayName = 'proto.types.NestedTestAllTypes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.NestedTestAllTypes.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.NestedTestAllTypes.prototype.toObject = function(opt_includeInstance) {
  return proto.types.NestedTestAllTypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.NestedTestAllTypes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.types.NestedTestAllTypes.toObject = function(includeInstance, msg) {
  var f, obj = {
    child: (f = msg.getChild()) && proto.types.NestedTestAllTypes.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && proto.types.TestAllTypes.toObject(includeInstance, f),
    repeatedChildList: jspb.Message.toObjectList(msg.getRepeatedChildList(),
    proto.types.NestedTestAllTypes.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.NestedTestAllTypes}
 */
proto.types.NestedTestAllTypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.NestedTestAllTypes;
  return proto.types.NestedTestAllTypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.NestedTestAllTypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.NestedTestAllTypes}
 */
proto.types.NestedTestAllTypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.NestedTestAllTypes;
      reader.readMessage(value,proto.types.NestedTestAllTypes.deserializeBinaryFromReader);
      msg.setChild(value);
      break;
    case 2:
      var value = new proto.types.TestAllTypes;
      reader.readMessage(value,proto.types.TestAllTypes.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 3:
      var value = new proto.types.NestedTestAllTypes;
      reader.readMessage(value,proto.types.NestedTestAllTypes.deserializeBinaryFromReader);
      msg.addRepeatedChild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.NestedTestAllTypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.NestedTestAllTypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.NestedTestAllTypes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.types.NestedTestAllTypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChild();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.NestedTestAllTypes.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.TestAllTypes.serializeBinaryToWriter
    );
  }
  f = message.getRepeatedChildList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.types.NestedTestAllTypes.serializeBinaryToWriter
    );
  }
};


/**
 * optional NestedTestAllTypes child = 1;
 * @return {?proto.types.NestedTestAllTypes}
 */
proto.types.NestedTestAllTypes.prototype.getChild = function() {
  return /** @type{?proto.types.NestedTestAllTypes} */ (
    jspb.Message.getWrapperField(this, proto.types.NestedTestAllTypes, 1));
};


/** @param {?proto.types.NestedTestAllTypes|undefined} value */
proto.types.NestedTestAllTypes.prototype.setChild = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.NestedTestAllTypes.prototype.clearChild = function() {
  this.setChild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.NestedTestAllTypes.prototype.hasChild = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TestAllTypes payload = 2;
 * @return {?proto.types.TestAllTypes}
 */
proto.types.NestedTestAllTypes.prototype.getPayload = function() {
  return /** @type{?proto.types.TestAllTypes} */ (
    jspb.Message.getWrapperField(this, proto.types.TestAllTypes, 2));
};


/** @param {?proto.types.TestAllTypes|undefined} value */
proto.types.NestedTestAllTypes.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.NestedTestAllTypes.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.NestedTestAllTypes.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated NestedTestAllTypes repeated_child = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.types.NestedTestAllTypes>}
 */
proto.types.NestedTestAllTypes.prototype.getRepeatedChildList = function() {
  return /** @type{!Array.<!proto.types.NestedTestAllTypes>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.NestedTestAllTypes, 3));
};


/** @param {!Array.<!proto.types.NestedTestAllTypes>} value */
proto.types.NestedTestAllTypes.prototype.setRepeatedChildList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.types.NestedTestAllTypes=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.NestedTestAllTypes}
 */
proto.types.NestedTestAllTypes.prototype.addRepeatedChild = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.NestedTestAllTypes, opt_index);
};


proto.types.NestedTestAllTypes.prototype.clearRepeatedChildList = function() {
  this.setRepeatedChildList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ForeignMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.ForeignMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.ForeignMessage.displayName = 'proto.types.ForeignMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ForeignMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ForeignMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ForeignMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.types.ForeignMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    c: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ForeignMessage}
 */
proto.types.ForeignMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ForeignMessage;
  return proto.types.ForeignMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ForeignMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ForeignMessage}
 */
proto.types.ForeignMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setC(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ForeignMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ForeignMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ForeignMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.types.ForeignMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getC();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 c = 1;
 * @return {number}
 */
proto.types.ForeignMessage.prototype.getC = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.ForeignMessage.prototype.setC = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TestMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TestMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TestMap.displayName = 'proto.types.TestMap';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TestMap.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TestMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TestMap} msg The msg instance to transform.
 * @return {!Object}
 */
proto.types.TestMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapInt32Int32Map: (f = msg.getMapInt32Int32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt64Int64Map: (f = msg.getMapInt64Int64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint32Uint32Map: (f = msg.getMapUint32Uint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint64Uint64Map: (f = msg.getMapUint64Uint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint32Sint32Map: (f = msg.getMapSint32Sint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint64Sint64Map: (f = msg.getMapSint64Sint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed32Fixed32Map: (f = msg.getMapFixed32Fixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed64Fixed64Map: (f = msg.getMapFixed64Fixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed32Sfixed32Map: (f = msg.getMapSfixed32Sfixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed64Sfixed64Map: (f = msg.getMapSfixed64Sfixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32FloatMap: (f = msg.getMapInt32FloatMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32DoubleMap: (f = msg.getMapInt32DoubleMap()) ? f.toObject(includeInstance, undefined) : [],
    mapBoolBoolMap: (f = msg.getMapBoolBoolMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringStringMap: (f = msg.getMapStringStringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32BytesMap: (f = msg.getMapInt32BytesMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32EnumMap: (f = msg.getMapInt32EnumMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32ForeignMessageMap: (f = msg.getMapInt32ForeignMessageMap()) ? f.toObject(includeInstance, proto.types.ForeignMessage.toObject) : [],
    mapInt32ImportedMessageMap: (f = msg.getMapInt32ImportedMessageMap()) ? f.toObject(includeInstance, proto.multitest.Multi1.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TestMap}
 */
proto.types.TestMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TestMap;
  return proto.types.TestMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TestMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TestMap}
 */
proto.types.TestMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapInt32Int32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32);
         });
      break;
    case 2:
      var value = msg.getMapInt64Int64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64);
         });
      break;
    case 3:
      var value = msg.getMapUint32Uint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32);
         });
      break;
    case 4:
      var value = msg.getMapUint64Uint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64);
         });
      break;
    case 5:
      var value = msg.getMapSint32Sint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint32, jspb.BinaryReader.prototype.readSint32);
         });
      break;
    case 6:
      var value = msg.getMapSint64Sint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint64, jspb.BinaryReader.prototype.readSint64);
         });
      break;
    case 7:
      var value = msg.getMapFixed32Fixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed32, jspb.BinaryReader.prototype.readFixed32);
         });
      break;
    case 8:
      var value = msg.getMapFixed64Fixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed64, jspb.BinaryReader.prototype.readFixed64);
         });
      break;
    case 9:
      var value = msg.getMapSfixed32Sfixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed32, jspb.BinaryReader.prototype.readSfixed32);
         });
      break;
    case 10:
      var value = msg.getMapSfixed64Sfixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed64, jspb.BinaryReader.prototype.readSfixed64);
         });
      break;
    case 11:
      var value = msg.getMapInt32FloatMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readFloat);
         });
      break;
    case 12:
      var value = msg.getMapInt32DoubleMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readDouble);
         });
      break;
    case 13:
      var value = msg.getMapBoolBoolMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readBool, jspb.BinaryReader.prototype.readBool);
         });
      break;
    case 14:
      var value = msg.getMapStringStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 15:
      var value = msg.getMapInt32BytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readBytes);
         });
      break;
    case 16:
      var value = msg.getMapInt32EnumMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum);
         });
      break;
    case 17:
      var value = msg.getMapInt32ForeignMessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.types.ForeignMessage.deserializeBinaryFromReader);
         });
      break;
    case 18:
      var value = msg.getMapInt32ImportedMessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.multitest.Multi1.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TestMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TestMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TestMap} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.types.TestMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapInt32Int32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getMapInt64Int64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getMapUint32Uint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getMapUint64Uint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getMapSint32Sint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeSint32, jspb.BinaryWriter.prototype.writeSint32);
  }
  f = message.getMapSint64Sint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeSint64, jspb.BinaryWriter.prototype.writeSint64);
  }
  f = message.getMapFixed32Fixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeFixed32, jspb.BinaryWriter.prototype.writeFixed32);
  }
  f = message.getMapFixed64Fixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeFixed64, jspb.BinaryWriter.prototype.writeFixed64);
  }
  f = message.getMapSfixed32Sfixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeSfixed32, jspb.BinaryWriter.prototype.writeSfixed32);
  }
  f = message.getMapSfixed64Sfixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeSfixed64, jspb.BinaryWriter.prototype.writeSfixed64);
  }
  f = message.getMapInt32FloatMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getMapInt32DoubleMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeDouble);
  }
  f = message.getMapBoolBoolMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeBool, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getMapStringStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapInt32BytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getMapInt32EnumMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getMapInt32ForeignMessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.types.ForeignMessage.serializeBinaryToWriter);
  }
  f = message.getMapInt32ImportedMessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.multitest.Multi1.serializeBinaryToWriter);
  }
};


/**
 * map<int32, int32> map_int32_int32 = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapInt32Int32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapInt32Int32Map = function() {
  this.getMapInt32Int32Map().clear();
};


/**
 * map<int64, int64> map_int64_int64 = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapInt64Int64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapInt64Int64Map = function() {
  this.getMapInt64Int64Map().clear();
};


/**
 * map<uint32, uint32> map_uint32_uint32 = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapUint32Uint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapUint32Uint32Map = function() {
  this.getMapUint32Uint32Map().clear();
};


/**
 * map<uint64, uint64> map_uint64_uint64 = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapUint64Uint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapUint64Uint64Map = function() {
  this.getMapUint64Uint64Map().clear();
};


/**
 * map<sint32, sint32> map_sint32_sint32 = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapSint32Sint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapSint32Sint32Map = function() {
  this.getMapSint32Sint32Map().clear();
};


/**
 * map<sint64, sint64> map_sint64_sint64 = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapSint64Sint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapSint64Sint64Map = function() {
  this.getMapSint64Sint64Map().clear();
};


/**
 * map<fixed32, fixed32> map_fixed32_fixed32 = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapFixed32Fixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapFixed32Fixed32Map = function() {
  this.getMapFixed32Fixed32Map().clear();
};


/**
 * map<fixed64, fixed64> map_fixed64_fixed64 = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapFixed64Fixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapFixed64Fixed64Map = function() {
  this.getMapFixed64Fixed64Map().clear();
};


/**
 * map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapSfixed32Sfixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapSfixed32Sfixed32Map = function() {
  this.getMapSfixed32Sfixed32Map().clear();
};


/**
 * map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapSfixed64Sfixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapSfixed64Sfixed64Map = function() {
  this.getMapSfixed64Sfixed64Map().clear();
};


/**
 * map<int32, float> map_int32_float = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapInt32FloatMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapInt32FloatMap = function() {
  this.getMapInt32FloatMap().clear();
};


/**
 * map<int32, double> map_int32_double = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.types.TestMap.prototype.getMapInt32DoubleMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapInt32DoubleMap = function() {
  this.getMapInt32DoubleMap().clear();
};


/**
 * map<bool, bool> map_bool_bool = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<boolean,boolean>}
 */
proto.types.TestMap.prototype.getMapBoolBoolMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<boolean,boolean>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapBoolBoolMap = function() {
  this.getMapBoolBoolMap().clear();
};


/**
 * map<string, string> map_string_string = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.types.TestMap.prototype.getMapStringStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapStringStringMap = function() {
  this.getMapStringStringMap().clear();
};


/**
 * map<int32, bytes> map_int32_bytes = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!(string|Uint8Array)>}
 */
proto.types.TestMap.prototype.getMapInt32BytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapInt32BytesMap = function() {
  this.getMapInt32BytesMap().clear();
};


/**
 * map<int32, MapEnum> map_int32_enum = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.types.MapEnum>}
 */
proto.types.TestMap.prototype.getMapInt32EnumMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.types.MapEnum>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


proto.types.TestMap.prototype.clearMapInt32EnumMap = function() {
  this.getMapInt32EnumMap().clear();
};


/**
 * map<int32, ForeignMessage> map_int32_foreign_message = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.types.ForeignMessage>}
 */
proto.types.TestMap.prototype.getMapInt32ForeignMessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.types.ForeignMessage>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      proto.types.ForeignMessage));
};


proto.types.TestMap.prototype.clearMapInt32ForeignMessageMap = function() {
  this.getMapInt32ForeignMessageMap().clear();
};


/**
 * map<int32, multitest.Multi1> map_int32_imported_message = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.multitest.Multi1>}
 */
proto.types.TestMap.prototype.getMapInt32ImportedMessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.multitest.Multi1>} */ (
      jspb.Message.getMapField(this, 18, opt_noLazyCreate,
      proto.multitest.Multi1));
};


proto.types.TestMap.prototype.clearMapInt32ImportedMessageMap = function() {
  this.getMapInt32ImportedMessageMap().clear();
};


/**
 * @enum {number}
 */
proto.types.ForeignEnum = {
  FOREIGN_UNSPECIFIED: 0,
  FOREIGN_FOO: 4,
  FOREIGN_BAR: 5,
  FOREIGN_BAZ: 6
};

/**
 * @enum {number}
 */
proto.types.MapEnum = {
  MAP_ENUM_FOO: 0,
  MAP_ENUM_BAR: 1,
  MAP_ENUM_BAZ: 2
};

goog.object.extend(exports, proto.types);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = window;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = window.proto.multitest;

/***/ })
/******/ ]);