// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.

syntax = "proto3";

package types;

import "multi/multi1.proto";

// This proto includes every type of field in both singular and repeated
// forms.
message TestAllTypes {
  message NestedMessage {
    int32 b = 1;
  }

  enum NestedEnum {
    NESTED_ENUM_UNSPECIFIED = 0;
    FOO = 1;
    BAR = 2;
    BAZ = 3;
    NEG = -1;  // Intentionally negative.
  }

  // Singular
  int32    single_int32    = 1;
  int64    single_int64    = 2;
  uint32   single_uint32   = 3;
  uint64   single_uint64   = 4;
  sint32   single_sint32   = 5;
  sint64   single_sint64   = 6;
  fixed32  single_fixed32  = 7;
  fixed64  single_fixed64  = 8;
  sfixed32 single_sfixed32 = 9;
  sfixed64 single_sfixed64 = 10;
  float    single_float    = 11;
  double   single_double   = 12;
  bool     single_bool     = 13;
  string   single_string   = 14;
  bytes    single_bytes    = 15;

  multitest.Multi1 single_imported_message = 16;

  NestedMessage    single_nested_message   = 18;
  ForeignMessage   single_foreign_message  = 19;

  NestedEnum       single_nested_enum      = 21;
  ForeignEnum      single_foreign_enum     = 22;

  // Repeated
  repeated    int32 repeated_int32    = 31;
  repeated    int64 repeated_int64    = 32;
  repeated   uint32 repeated_uint32   = 33;
  repeated   uint64 repeated_uint64   = 34;
  repeated   sint32 repeated_sint32   = 35;
  repeated   sint64 repeated_sint64   = 36;
  repeated  fixed32 repeated_fixed32  = 37;
  repeated  fixed64 repeated_fixed64  = 38;
  repeated sfixed32 repeated_sfixed32 = 39;
  repeated sfixed64 repeated_sfixed64 = 40;
  repeated    float repeated_float    = 41;
  repeated   double repeated_double   = 42;
  repeated     bool repeated_bool     = 43;
  repeated   string repeated_string   = 44;
  repeated    bytes repeated_bytes    = 45;

  repeated multitest.Multi1 repeated_imported_message = 46;

  repeated NestedMessage    repeated_nested_message   = 48;
  repeated ForeignMessage   repeated_foreign_message  = 49;

  repeated NestedEnum       repeated_nested_enum      = 51;
  repeated ForeignEnum      repeated_foreign_enum     = 52;

  // For oneof test
  oneof oneof_field {
    uint32           oneof_uint32           = 111;
    NestedMessage    oneof_nested_message   = 112;
    string           oneof_string           = 113;
    bytes            oneof_bytes            = 114;
    multitest.Multi1 oneof_imported_message = 115;
  }
}

// This proto includes a recusively nested message.
message NestedTestAllTypes {
  NestedTestAllTypes          child          = 1;
  TestAllTypes                payload        = 2;
  repeated NestedTestAllTypes repeated_child = 3;
}

// Define these after TestAllTypes to make sure the compiler can handle
// that.
message ForeignMessage {
  int32 c = 1;
}

enum ForeignEnum {
  FOREIGN_UNSPECIFIED = 0;
  FOREIGN_FOO = 4;
  FOREIGN_BAR = 5;
  FOREIGN_BAZ = 6;
}

// Tests maps.
message TestMap {
  map<int32   , int32   > map_int32_int32       = 1;
  map<int64   , int64   > map_int64_int64       = 2;
  map<uint32  , uint32  > map_uint32_uint32     = 3;
  map<uint64  , uint64  > map_uint64_uint64     = 4;
  map<sint32  , sint32  > map_sint32_sint32     = 5;
  map<sint64  , sint64  > map_sint64_sint64     = 6;
  map<fixed32 , fixed32 > map_fixed32_fixed32   = 7;
  map<fixed64 , fixed64 > map_fixed64_fixed64   = 8;
  map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
  map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
  map<int32   , float   > map_int32_float       = 11;
  map<int32   , double  > map_int32_double      = 12;
  map<bool    , bool    > map_bool_bool         = 13;
  map<string  , string  > map_string_string     = 14;
  map<int32   , bytes   > map_int32_bytes       = 15;
  map<int32   , MapEnum > map_int32_enum        = 16;
  map<int32   , ForeignMessage> map_int32_foreign_message = 17;
  map<int32   , multitest.Multi1> map_int32_imported_message      = 18;
}

enum MapEnum {
  MAP_ENUM_FOO = 0;
  MAP_ENUM_BAR = 1;
  MAP_ENUM_BAZ = 2;
}
