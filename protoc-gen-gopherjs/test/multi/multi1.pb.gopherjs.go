// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: multi/multi1.proto

/*
	Package multi is a generated protocol buffer package.

	It is generated from these files:
		multi/multi1.proto
		multi/multi2.proto
		multi/multi3.proto

	It has these top-level messages:
		Multi1
		Multi2
		Multi3
*/
package multi

import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

type Multi1 struct {
	Multi2  *Multi2
	Color   Multi2_Color
	HatType Multi3_HatType
}

// GetMulti2 gets the Multi2 of the Multi1.
func (m *Multi1) GetMulti2() (x *Multi2) {
	if m == nil {
		return x
	}
	return m.Multi2
}

// GetColor gets the Color of the Multi1.
func (m *Multi1) GetColor() (x Multi2_Color) {
	if m == nil {
		return x
	}
	return m.Color
}

// GetHatType gets the HatType of the Multi1.
func (m *Multi1) GetHatType() (x Multi3_HatType) {
	if m == nil {
		return x
	}
	return m.HatType
}

// MarshalToWriter marshals Multi1 to the provided writer.
func (m *Multi1) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Multi2 != nil {
		writer.WriteMessage(1, func() {
			m.Multi2.MarshalToWriter(writer)
		})
	}

	if int(m.Color) != 0 {
		writer.WriteEnum(2, int(m.Color))
	}

	if int(m.HatType) != 0 {
		writer.WriteEnum(3, int(m.HatType))
	}

	return
}

// Marshal marshals Multi1 to a slice of bytes.
func (m *Multi1) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Multi1 from the provided reader.
func (m *Multi1) UnmarshalFromReader(reader jspb.Reader) *Multi1 {
	for reader.Next() {
		if m == nil {
			m = &Multi1{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.Multi2 = m.Multi2.UnmarshalFromReader(reader)
			})
		case 2:
			m.Color = Multi2_Color(reader.ReadEnum())
		case 3:
			m.HatType = Multi3_HatType(reader.ReadEnum())
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Multi1 from a slice of bytes.
func (m *Multi1) Unmarshal(rawBytes []byte) (*Multi1, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}
