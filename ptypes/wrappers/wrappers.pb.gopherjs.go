// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: wrappers/wrappers.proto

/*
Package wrappers is a generated protocol buffer package.

It is generated from these files:
	wrappers/wrappers.proto

It has these top-level messages:
	DoubleValue
	FloatValue
	Int64Value
	UInt64Value
	Int32Value
	UInt32Value
	BoolValue
	StringValue
	BytesValue
*/
package wrappers

import js "github.com/gopherjs/gopherjs/js"
import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion1

// Wrapper message for `double`.
//
// The JSON representation for `DoubleValue` is JSON number.
type DoubleValue struct {
	*js.Object
}

// GetValue gets the Value of the DoubleValue.
// The double value.
func (m *DoubleValue) GetValue() (x float64) {
	if m == nil {
		return x
	}
	return m.Call("getValue").Float()
}

// SetValue sets the Value of the DoubleValue.
// The double value.
func (m *DoubleValue) SetValue(v float64) {
	m.Call("setValue", v)
}

// New creates a new DoubleValue.
// The double value.
func (m *DoubleValue) New(value float64) *DoubleValue {
	m = &DoubleValue{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("DoubleValue").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals DoubleValue to a slice of bytes.
func (m *DoubleValue) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a DoubleValue from a slice of bytes.
func (m *DoubleValue) Deserialize(rawBytes []byte) (*DoubleValue, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("DoubleValue"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &DoubleValue{
		Object: obj,
	}, nil
}

// Wrapper message for `float`.
//
// The JSON representation for `FloatValue` is JSON number.
type FloatValue struct {
	*js.Object
}

// GetValue gets the Value of the FloatValue.
// The float value.
func (m *FloatValue) GetValue() (x float32) {
	if m == nil {
		return x
	}
	return float32(m.Call("getValue").Float())
}

// SetValue sets the Value of the FloatValue.
// The float value.
func (m *FloatValue) SetValue(v float32) {
	m.Call("setValue", v)
}

// New creates a new FloatValue.
// The float value.
func (m *FloatValue) New(value float32) *FloatValue {
	m = &FloatValue{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("FloatValue").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals FloatValue to a slice of bytes.
func (m *FloatValue) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a FloatValue from a slice of bytes.
func (m *FloatValue) Deserialize(rawBytes []byte) (*FloatValue, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("FloatValue"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &FloatValue{
		Object: obj,
	}, nil
}

// Wrapper message for `int64`.
//
// The JSON representation for `Int64Value` is JSON string.
type Int64Value struct {
	*js.Object
}

// GetValue gets the Value of the Int64Value.
// The int64 value.
func (m *Int64Value) GetValue() (x int64) {
	if m == nil {
		return x
	}
	return m.Call("getValue").Int64()
}

// SetValue sets the Value of the Int64Value.
// The int64 value.
func (m *Int64Value) SetValue(v int64) {
	m.Call("setValue", v)
}

// New creates a new Int64Value.
// The int64 value.
func (m *Int64Value) New(value int64) *Int64Value {
	m = &Int64Value{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("Int64Value").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals Int64Value to a slice of bytes.
func (m *Int64Value) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a Int64Value from a slice of bytes.
func (m *Int64Value) Deserialize(rawBytes []byte) (*Int64Value, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("Int64Value"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &Int64Value{
		Object: obj,
	}, nil
}

// Wrapper message for `uint64`.
//
// The JSON representation for `UInt64Value` is JSON string.
type UInt64Value struct {
	*js.Object
}

// GetValue gets the Value of the UInt64Value.
// The uint64 value.
func (m *UInt64Value) GetValue() (x uint64) {
	if m == nil {
		return x
	}
	return m.Call("getValue").Uint64()
}

// SetValue sets the Value of the UInt64Value.
// The uint64 value.
func (m *UInt64Value) SetValue(v uint64) {
	m.Call("setValue", v)
}

// New creates a new UInt64Value.
// The uint64 value.
func (m *UInt64Value) New(value uint64) *UInt64Value {
	m = &UInt64Value{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("UInt64Value").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals UInt64Value to a slice of bytes.
func (m *UInt64Value) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a UInt64Value from a slice of bytes.
func (m *UInt64Value) Deserialize(rawBytes []byte) (*UInt64Value, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("UInt64Value"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &UInt64Value{
		Object: obj,
	}, nil
}

// Wrapper message for `int32`.
//
// The JSON representation for `Int32Value` is JSON number.
type Int32Value struct {
	*js.Object
}

// GetValue gets the Value of the Int32Value.
// The int32 value.
func (m *Int32Value) GetValue() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getValue").Int())
}

// SetValue sets the Value of the Int32Value.
// The int32 value.
func (m *Int32Value) SetValue(v int32) {
	m.Call("setValue", v)
}

// New creates a new Int32Value.
// The int32 value.
func (m *Int32Value) New(value int32) *Int32Value {
	m = &Int32Value{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("Int32Value").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals Int32Value to a slice of bytes.
func (m *Int32Value) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a Int32Value from a slice of bytes.
func (m *Int32Value) Deserialize(rawBytes []byte) (*Int32Value, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("Int32Value"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &Int32Value{
		Object: obj,
	}, nil
}

// Wrapper message for `uint32`.
//
// The JSON representation for `UInt32Value` is JSON number.
type UInt32Value struct {
	*js.Object
}

// GetValue gets the Value of the UInt32Value.
// The uint32 value.
func (m *UInt32Value) GetValue() (x uint32) {
	if m == nil {
		return x
	}
	return uint32(m.Call("getValue").Int())
}

// SetValue sets the Value of the UInt32Value.
// The uint32 value.
func (m *UInt32Value) SetValue(v uint32) {
	m.Call("setValue", v)
}

// New creates a new UInt32Value.
// The uint32 value.
func (m *UInt32Value) New(value uint32) *UInt32Value {
	m = &UInt32Value{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("UInt32Value").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals UInt32Value to a slice of bytes.
func (m *UInt32Value) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a UInt32Value from a slice of bytes.
func (m *UInt32Value) Deserialize(rawBytes []byte) (*UInt32Value, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("UInt32Value"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &UInt32Value{
		Object: obj,
	}, nil
}

// Wrapper message for `bool`.
//
// The JSON representation for `BoolValue` is JSON `true` and `false`.
type BoolValue struct {
	*js.Object
}

// GetValue gets the Value of the BoolValue.
// The bool value.
func (m *BoolValue) GetValue() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getValue").Bool()
}

// SetValue sets the Value of the BoolValue.
// The bool value.
func (m *BoolValue) SetValue(v bool) {
	m.Call("setValue", v)
}

// New creates a new BoolValue.
// The bool value.
func (m *BoolValue) New(value bool) *BoolValue {
	m = &BoolValue{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("BoolValue").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals BoolValue to a slice of bytes.
func (m *BoolValue) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a BoolValue from a slice of bytes.
func (m *BoolValue) Deserialize(rawBytes []byte) (*BoolValue, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("BoolValue"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &BoolValue{
		Object: obj,
	}, nil
}

// Wrapper message for `string`.
//
// The JSON representation for `StringValue` is JSON string.
type StringValue struct {
	*js.Object
}

// GetValue gets the Value of the StringValue.
// The string value.
func (m *StringValue) GetValue() (x string) {
	if m == nil {
		return x
	}
	return m.Call("getValue").String()
}

// SetValue sets the Value of the StringValue.
// The string value.
func (m *StringValue) SetValue(v string) {
	m.Call("setValue", v)
}

// New creates a new StringValue.
// The string value.
func (m *StringValue) New(value string) *StringValue {
	m = &StringValue{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("StringValue").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals StringValue to a slice of bytes.
func (m *StringValue) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a StringValue from a slice of bytes.
func (m *StringValue) Deserialize(rawBytes []byte) (*StringValue, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("StringValue"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &StringValue{
		Object: obj,
	}, nil
}

// Wrapper message for `bytes`.
//
// The JSON representation for `BytesValue` is JSON string.
type BytesValue struct {
	*js.Object
}

// GetValue gets the Value of the BytesValue.
// The bytes value.
func (m *BytesValue) GetValue() (x []byte) {
	if m == nil {
		return x
	}
	return m.Call("getValue_asU8").Interface().([]byte)
}

// SetValue sets the Value of the BytesValue.
// The bytes value.
func (m *BytesValue) SetValue(v []byte) {
	m.Call("setValue", v)
}

// New creates a new BytesValue.
// The bytes value.
func (m *BytesValue) New(value []byte) *BytesValue {
	m = &BytesValue{
		Object: js.Global.Get("proto").Get("google").Get("protobuf").Get("BytesValue").New([]interface{}{
			value,
		}),
	}

	return m
}

// Serialize marshals BytesValue to a slice of bytes.
func (m *BytesValue) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a BytesValue from a slice of bytes.
func (m *BytesValue) Deserialize(rawBytes []byte) (*BytesValue, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("google").Get("protobuf").Get("BytesValue"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &BytesValue{
		Object: obj,
	}, nil
}
