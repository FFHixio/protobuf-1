/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = __webpack_require__(1);
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = __webpack_require__(2);
goog.exportSymbol('proto.test.ExtraStuff', null, global);
goog.exportSymbol('proto.test.PingRequest', null, global);
goog.exportSymbol('proto.test.PingRequest.FailureType', null, global);
goog.exportSymbol('proto.test.PingResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.test.ExtraStuff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.test.ExtraStuff.repeatedFields_, proto.test.ExtraStuff.oneofGroups_);
};
goog.inherits(proto.test.ExtraStuff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.test.ExtraStuff.displayName = 'proto.test.ExtraStuff';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.test.ExtraStuff.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.test.ExtraStuff.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.test.ExtraStuff.TitleCase = {
  TITLE_NOT_SET: 0,
  FIRST_NAME: 2,
  ID_NUMBER: 3
};

/**
 * @return {proto.test.ExtraStuff.TitleCase}
 */
proto.test.ExtraStuff.prototype.getTitleCase = function() {
  return /** @type {proto.test.ExtraStuff.TitleCase} */(jspb.Message.computeOneofCase(this, proto.test.ExtraStuff.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.test.ExtraStuff.prototype.toObject = function(opt_includeInstance) {
  return proto.test.ExtraStuff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.test.ExtraStuff} msg The msg instance to transform.
 * @return {!Object}
 */
proto.test.ExtraStuff.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressesMap: (f = msg.getAddressesMap()) ? f.toObject(includeInstance, undefined) : [],
    firstName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    idNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cardNumbersList: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.test.ExtraStuff}
 */
proto.test.ExtraStuff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.test.ExtraStuff;
  return proto.test.ExtraStuff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.test.ExtraStuff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.test.ExtraStuff}
 */
proto.test.ExtraStuff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAddressesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdNumber(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setCardNumbersList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.test.ExtraStuff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.test.ExtraStuff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.test.ExtraStuff} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.test.ExtraStuff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeString);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCardNumbersList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
};


/**
 * map<int32, string> addresses = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.test.ExtraStuff.prototype.getAddressesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.test.ExtraStuff.prototype.clearAddressesMap = function() {
  this.getAddressesMap().clear();
};


/**
 * optional string first_name = 2;
 * @return {string}
 */
proto.test.ExtraStuff.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.test.ExtraStuff.prototype.setFirstName = function(value) {
  jspb.Message.setOneofField(this, 2, proto.test.ExtraStuff.oneofGroups_[0], value);
};


proto.test.ExtraStuff.prototype.clearFirstName = function() {
  jspb.Message.setOneofField(this, 2, proto.test.ExtraStuff.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.test.ExtraStuff.prototype.hasFirstName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 id_number = 3;
 * @return {number}
 */
proto.test.ExtraStuff.prototype.getIdNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.test.ExtraStuff.prototype.setIdNumber = function(value) {
  jspb.Message.setOneofField(this, 3, proto.test.ExtraStuff.oneofGroups_[0], value);
};


proto.test.ExtraStuff.prototype.clearIdNumber = function() {
  jspb.Message.setOneofField(this, 3, proto.test.ExtraStuff.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.test.ExtraStuff.prototype.hasIdNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint32 card_numbers = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.test.ExtraStuff.prototype.getCardNumbersList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<number>} value */
proto.test.ExtraStuff.prototype.setCardNumbersList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.test.ExtraStuff.prototype.addCardNumbers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.test.ExtraStuff.prototype.clearCardNumbersList = function() {
  this.setCardNumbersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.test.PingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.test.PingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.test.PingRequest.displayName = 'proto.test.PingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.test.PingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.test.PingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.test.PingRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.test.PingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorCodeReturned: jspb.Message.getFieldWithDefault(msg, 3, 0),
    failureType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    checkMetadata: jspb.Message.getFieldWithDefault(msg, 5, false),
    sendHeaders: jspb.Message.getFieldWithDefault(msg, 6, false),
    sendTrailers: jspb.Message.getFieldWithDefault(msg, 7, false),
    messageLatencyMs: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.test.PingRequest}
 */
proto.test.PingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.test.PingRequest;
  return proto.test.PingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.test.PingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.test.PingRequest}
 */
proto.test.PingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponseCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setErrorCodeReturned(value);
      break;
    case 4:
      var value = /** @type {!proto.test.PingRequest.FailureType} */ (reader.readEnum());
      msg.setFailureType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckMetadata(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendHeaders(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendTrailers(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageLatencyMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.test.PingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.test.PingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.test.PingRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.test.PingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorCodeReturned();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFailureType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCheckMetadata();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSendHeaders();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSendTrailers();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getMessageLatencyMs();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.test.PingRequest.FailureType = {
  NONE: 0,
  CODE: 1,
  DROP: 2
};

/**
 * optional string value = 1;
 * @return {string}
 */
proto.test.PingRequest.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.test.PingRequest.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 response_count = 2;
 * @return {number}
 */
proto.test.PingRequest.prototype.getResponseCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.test.PingRequest.prototype.setResponseCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 error_code_returned = 3;
 * @return {number}
 */
proto.test.PingRequest.prototype.getErrorCodeReturned = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.test.PingRequest.prototype.setErrorCodeReturned = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional FailureType failure_type = 4;
 * @return {!proto.test.PingRequest.FailureType}
 */
proto.test.PingRequest.prototype.getFailureType = function() {
  return /** @type {!proto.test.PingRequest.FailureType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.test.PingRequest.FailureType} value */
proto.test.PingRequest.prototype.setFailureType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool check_metadata = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.test.PingRequest.prototype.getCheckMetadata = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.test.PingRequest.prototype.setCheckMetadata = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool send_headers = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.test.PingRequest.prototype.getSendHeaders = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.test.PingRequest.prototype.setSendHeaders = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool send_trailers = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.test.PingRequest.prototype.getSendTrailers = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.test.PingRequest.prototype.setSendTrailers = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 message_latency_ms = 8;
 * @return {number}
 */
proto.test.PingRequest.prototype.getMessageLatencyMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.test.PingRequest.prototype.setMessageLatencyMs = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.test.PingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.test.PingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.test.PingResponse.displayName = 'proto.test.PingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.test.PingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.test.PingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.test.PingResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.test.PingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    counter: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.test.PingResponse}
 */
proto.test.PingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.test.PingResponse;
  return proto.test.PingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.test.PingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.test.PingResponse}
 */
proto.test.PingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.test.PingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.test.PingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.test.PingResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.test.PingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string Value = 1;
 * @return {string}
 */
proto.test.PingResponse.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.test.PingResponse.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 counter = 2;
 * @return {number}
 */
proto.test.PingResponse.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.test.PingResponse.prototype.setCounter = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.test);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = window;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = window.proto.google.protobuf;

/***/ })
/******/ ]);