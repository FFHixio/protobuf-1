// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: proto/test/test.proto

/*
	Package test is a generated protocol buffer package.

	It is generated from these files:
		proto/test/test.proto

	It has these top-level messages:
		ExtraStuff
		PingRequest
		PingResponse
*/
package test

import js "github.com/gopherjs/gopherjs/js"
import jspb "github.com/johanbrandhorst/protobuf/jspb"
import google_protobuf "github.com/johanbrandhorst/protobuf/ptypes/empty"

import (
	context "context"
	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion1

type PingRequest_FailureType int

const (
	PingRequest_NONE PingRequest_FailureType = 0
	PingRequest_CODE PingRequest_FailureType = 1
	PingRequest_DROP PingRequest_FailureType = 2
)

var PingRequest_FailureType_name = map[int]string{
	0: "NONE",
	1: "CODE",
	2: "DROP",
}
var PingRequest_FailureType_value = map[string]int{
	"NONE": 0,
	"CODE": 1,
	"DROP": 2,
}

func (x PingRequest_FailureType) String() string {
	return PingRequest_FailureType_name[int(x)]
}

type ExtraStuff struct {
	*js.Object
}

// Types that are valid to be assigned to Title:
//	*ExtraStuff_FirstName
//	*ExtraStuff_IdNumber
type isExtraStuff_Title interface {
	isExtraStuff_Title()
}

type ExtraStuff_FirstName struct {
	FirstName string
}
type ExtraStuff_IdNumber struct {
	IdNumber int32
}

func (*ExtraStuff_FirstName) isExtraStuff_Title() {}
func (*ExtraStuff_IdNumber) isExtraStuff_Title()  {}

// GetTitle gets the Title of the ExtraStuff.
func (m *ExtraStuff) GetTitle() (x isExtraStuff_Title) {
	switch m.Call("getTitleCase").Int() {
	case 2:
		x = &ExtraStuff_FirstName{
			FirstName: m.GetFirstName(),
		}
	case 3:
		x = &ExtraStuff_IdNumber{
			IdNumber: m.GetIdNumber(),
		}
	}

	return x
}

// SetTitle sets the Title of theExtraStuff.
// If the input is nil, SetTitle does nothing.
func (m *ExtraStuff) SetTitle(title isExtraStuff_Title) {
	switch x := title.(type) {
	case *ExtraStuff_FirstName:
		m.SetFirstName(x.FirstName)
	case *ExtraStuff_IdNumber:
		m.SetIdNumber(x.IdNumber)
	}
}

// GetAddresses gets the Addresses of the ExtraStuff.
func (m *ExtraStuff) GetAddresses() (x map[int32]string) {
	if m == nil {
		return x
	}
	x = map[int32]string{}
	mapFunc := func(value *js.Object, key *js.Object) {
		x[int32(key.Int())] = value.String()
	}
	m.Call("getAddressesMap").Call("forEach", mapFunc)
	return x
}

// SetAddresses sets the Addresses of the ExtraStuff.
func (m *ExtraStuff) SetAddresses(v map[int32]string) {
	m.Call("clearAddressesMap")
	mp := m.Call("getAddressesMap")
	for key, value := range v {
		mp.Call("set", key, value)
	}
}

// ClearAddresses clears the Addresses of the ExtraStuff.
func (m *ExtraStuff) ClearAddresses() {
	m.Call("clearAddressesMap")
}

// GetFirstName gets the FirstName of the ExtraStuff.
func (m *ExtraStuff) GetFirstName() (x string) {
	if m == nil {
		return x
	}
	return m.Call("getFirstName").String()
}

// SetFirstName sets the FirstName of the ExtraStuff.
func (m *ExtraStuff) SetFirstName(v string) {
	m.Call("setFirstName", v)
}

// HasFirstName indicates whether the FirstName of the ExtraStuff is set.
func (m *ExtraStuff) HasFirstName() bool {
	if m == nil {
		return false
	}
	return m.Call("hasFirstName").Bool()
}

// ClearFirstName clears the FirstName of the ExtraStuff.
func (m *ExtraStuff) ClearFirstName() {
	m.Call("clearFirstName")
}

// GetIdNumber gets the IdNumber of the ExtraStuff.
func (m *ExtraStuff) GetIdNumber() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getIdNumber").Int())
}

// SetIdNumber sets the IdNumber of the ExtraStuff.
func (m *ExtraStuff) SetIdNumber(v int32) {
	m.Call("setIdNumber", v)
}

// HasIdNumber indicates whether the IdNumber of the ExtraStuff is set.
func (m *ExtraStuff) HasIdNumber() bool {
	if m == nil {
		return false
	}
	return m.Call("hasIdNumber").Bool()
}

// ClearIdNumber clears the IdNumber of the ExtraStuff.
func (m *ExtraStuff) ClearIdNumber() {
	m.Call("clearIdNumber")
}

// GetCardNumbers gets the CardNumbers of the ExtraStuff.
// Warning: mutating the returned slice will not be reflected in the message.
// Use the setter to make changes to the slice in the message.
func (m *ExtraStuff) GetCardNumbers() (x []uint32) {
	if m == nil {
		return x
	}
	arrFunc := func(value *js.Object) {
		x = append(x, uint32(value.Int()))
	}
	m.Call("getCardNumbersList").Call("forEach", arrFunc)
	return x
}

// SetCardNumbers sets the CardNumbers of the ExtraStuff.
func (m *ExtraStuff) SetCardNumbers(v []uint32) {
	arr := js.Global.Get("Array").New(len(v))
	for i, value := range v {
		arr.SetIndex(i, value)
	}
	m.Call("setCardNumbersList", arr)
}

// AddCardNumbers adds an entry to the CardNumbers slice of the ExtraStuff
// at the specified index. If index is negative, inserts the element
// at the index counted from the end of the slice, with origin 1.
func (m *ExtraStuff) AddCardNumbers(v uint32, index int) {
	m.Call("addCardNumbers", v, index)
}

// ClearCardNumbers clears the CardNumbers of the ExtraStuff.
func (m *ExtraStuff) ClearCardNumbers() {
	m.Call("clearCardNumbersList")
}

// New creates a new ExtraStuff.
func (m *ExtraStuff) New(addresses map[int32]string, title isExtraStuff_Title, cardNumbers []uint32) *ExtraStuff {
	m = &ExtraStuff{
		Object: js.Global.Get("proto").Get("test").Get("ExtraStuff").New([]interface{}{
			js.Undefined,
			js.Undefined,
			js.Undefined,
			js.Undefined,
		}),
	}

	m.SetTitle(title)

	mp := m.Call("getAddressesMap")
	for key, value := range addresses {
		mp.Call("set", key, value)
	}

	arr := js.Global.Get("Array").New(len(cardNumbers))
	for i, value := range cardNumbers {
		arr.SetIndex(i, value)
	}
	m.Call("setCardNumbersList", arr)

	return m
}

// Serialize marshals ExtraStuff to a slice of bytes.
func (m *ExtraStuff) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a ExtraStuff from a slice of bytes.
func (m *ExtraStuff) Deserialize(rawBytes []byte) (*ExtraStuff, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("test").Get("ExtraStuff"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &ExtraStuff{
		Object: obj,
	}, nil
}

type PingRequest struct {
	*js.Object
}

// GetValue gets the Value of the PingRequest.
func (m *PingRequest) GetValue() (x string) {
	if m == nil {
		return x
	}
	return m.Call("getValue").String()
}

// SetValue sets the Value of the PingRequest.
func (m *PingRequest) SetValue(v string) {
	m.Call("setValue", v)
}

// GetResponseCount gets the ResponseCount of the PingRequest.
func (m *PingRequest) GetResponseCount() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getResponseCount").Int())
}

// SetResponseCount sets the ResponseCount of the PingRequest.
func (m *PingRequest) SetResponseCount(v int32) {
	m.Call("setResponseCount", v)
}

// GetErrorCodeReturned gets the ErrorCodeReturned of the PingRequest.
func (m *PingRequest) GetErrorCodeReturned() (x uint32) {
	if m == nil {
		return x
	}
	return uint32(m.Call("getErrorCodeReturned").Int())
}

// SetErrorCodeReturned sets the ErrorCodeReturned of the PingRequest.
func (m *PingRequest) SetErrorCodeReturned(v uint32) {
	m.Call("setErrorCodeReturned", v)
}

// GetFailureType gets the FailureType of the PingRequest.
func (m *PingRequest) GetFailureType() (x PingRequest_FailureType) {
	if m == nil {
		return x
	}
	return PingRequest_FailureType(m.Call("getFailureType").Int())
}

// SetFailureType sets the FailureType of the PingRequest.
func (m *PingRequest) SetFailureType(v PingRequest_FailureType) {
	m.Call("setFailureType", v)
}

// GetCheckMetadata gets the CheckMetadata of the PingRequest.
func (m *PingRequest) GetCheckMetadata() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getCheckMetadata").Bool()
}

// SetCheckMetadata sets the CheckMetadata of the PingRequest.
func (m *PingRequest) SetCheckMetadata(v bool) {
	m.Call("setCheckMetadata", v)
}

// GetSendHeaders gets the SendHeaders of the PingRequest.
func (m *PingRequest) GetSendHeaders() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getSendHeaders").Bool()
}

// SetSendHeaders sets the SendHeaders of the PingRequest.
func (m *PingRequest) SetSendHeaders(v bool) {
	m.Call("setSendHeaders", v)
}

// GetSendTrailers gets the SendTrailers of the PingRequest.
func (m *PingRequest) GetSendTrailers() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getSendTrailers").Bool()
}

// SetSendTrailers sets the SendTrailers of the PingRequest.
func (m *PingRequest) SetSendTrailers(v bool) {
	m.Call("setSendTrailers", v)
}

// GetMessageLatencyMs gets the MessageLatencyMs of the PingRequest.
func (m *PingRequest) GetMessageLatencyMs() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getMessageLatencyMs").Int())
}

// SetMessageLatencyMs sets the MessageLatencyMs of the PingRequest.
func (m *PingRequest) SetMessageLatencyMs(v int32) {
	m.Call("setMessageLatencyMs", v)
}

// New creates a new PingRequest.
func (m *PingRequest) New(value string, responseCount int32, errorCodeReturned uint32, failureType PingRequest_FailureType, checkMetadata bool, sendHeaders bool, sendTrailers bool, messageLatencyMs int32) *PingRequest {
	m = &PingRequest{
		Object: js.Global.Get("proto").Get("test").Get("PingRequest").New([]interface{}{
			value,
			responseCount,
			errorCodeReturned,
			failureType,
			checkMetadata,
			sendHeaders,
			sendTrailers,
			messageLatencyMs,
		}),
	}

	return m
}

// Serialize marshals PingRequest to a slice of bytes.
func (m *PingRequest) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a PingRequest from a slice of bytes.
func (m *PingRequest) Deserialize(rawBytes []byte) (*PingRequest, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("test").Get("PingRequest"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &PingRequest{
		Object: obj,
	}, nil
}

type PingResponse struct {
	*js.Object
}

// GetValue gets the Value of the PingResponse.
func (m *PingResponse) GetValue() (x string) {
	if m == nil {
		return x
	}
	return m.Call("getValue").String()
}

// SetValue sets the Value of the PingResponse.
func (m *PingResponse) SetValue(v string) {
	m.Call("setValue", v)
}

// GetCounter gets the Counter of the PingResponse.
func (m *PingResponse) GetCounter() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getCounter").Int())
}

// SetCounter sets the Counter of the PingResponse.
func (m *PingResponse) SetCounter(v int32) {
	m.Call("setCounter", v)
}

// New creates a new PingResponse.
func (m *PingResponse) New(Value string, counter int32) *PingResponse {
	m = &PingResponse{
		Object: js.Global.Get("proto").Get("test").Get("PingResponse").New([]interface{}{
			Value,
			counter,
		}),
	}

	return m
}

// Serialize marshals PingResponse to a slice of bytes.
func (m *PingResponse) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a PingResponse from a slice of bytes.
func (m *PingResponse) Deserialize(rawBytes []byte) (*PingResponse, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("test").Get("PingResponse"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &PingResponse{
		Object: obj,
	}, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion1

// Client API for TestService service

type TestServiceClient interface {
	PingEmpty(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*PingResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*PingResponse, error)
	PingError(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*google_protobuf.Empty, error)
	PingList(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (TestService_PingListClient, error)
}

type testServiceClient struct {
	client *grpcweb.Client
}

// NewTestServiceClient creates a new gRPC-Web client.
func NewTestServiceClient(hostname string, opts ...grpcweb.DialOption) TestServiceClient {
	return &testServiceClient{
		client: grpcweb.NewClient(hostname, "test.TestService", opts...),
	}
}

func (c *testServiceClient) PingEmpty(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*PingResponse, error) {
	req := in.Serialize()

	resp, err := c.client.RPCCall(ctx, "PingEmpty", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Deserialize(resp)
}

func (c *testServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*PingResponse, error) {
	req := in.Serialize()

	resp, err := c.client.RPCCall(ctx, "Ping", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Deserialize(resp)
}

func (c *testServiceClient) PingError(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*google_protobuf.Empty, error) {
	req := in.Serialize()

	resp, err := c.client.RPCCall(ctx, "PingError", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(google_protobuf.Empty).Deserialize(resp)
}

func (c *testServiceClient) PingList(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (TestService_PingListClient, error) {
	req := in.Serialize()

	srv, err := c.client.Stream(ctx, "PingList", req, opts...)
	if err != nil {
		return nil, err
	}

	return &testServicePingListClient{
		stream: srv,
	}, nil
}

type TestService_PingListClient interface {
	Recv() (*PingResponse, error)
}

type testServicePingListClient struct {
	stream *grpcweb.StreamClient
}

func (x *testServicePingListClient) Recv() (*PingResponse, error) {
	resp, err := x.stream.Recv()
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Deserialize(resp)
}
