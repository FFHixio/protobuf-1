// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: proto/test/test.proto

/*
	Package test is a generated protocol buffer package.

	It is generated from these files:
		proto/test/test.proto

	It has these top-level messages:
		ExtraStuff
		PingRequest
		PingResponse
*/
package test

import jspb "github.com/johanbrandhorst/protobuf/jspb"
import google_protobuf "github.com/johanbrandhorst/protobuf/ptypes/empty"

import (
	context "context"

	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion1

type PingRequest_FailureType int

const (
	PingRequest_NONE PingRequest_FailureType = 0
	PingRequest_CODE PingRequest_FailureType = 1
	PingRequest_DROP PingRequest_FailureType = 2
)

var PingRequest_FailureType_name = map[int]string{
	0: "NONE",
	1: "CODE",
	2: "DROP",
}
var PingRequest_FailureType_value = map[string]int{
	"NONE": 0,
	"CODE": 1,
	"DROP": 2,
}

func (x PingRequest_FailureType) String() string {
	return PingRequest_FailureType_name[int(x)]
}

type ExtraStuff struct {
	Addresses map[int32]string
	// Types that are valid to be assigned to Title:
	//	*ExtraStuff_FirstName
	//	*ExtraStuff_IdNumber
	Title       isExtraStuff_Title
	CardNumbers []uint32
}

// Types that are valid to be assigned to Title:
//	*ExtraStuff_FirstName
//	*ExtraStuff_IdNumber
type isExtraStuff_Title interface {
	isExtraStuff_Title()
}

type ExtraStuff_FirstName struct {
	FirstName string
}
type ExtraStuff_IdNumber struct {
	IdNumber int32
}

func (*ExtraStuff_FirstName) isExtraStuff_Title() {}
func (*ExtraStuff_IdNumber) isExtraStuff_Title()  {}

// GetTitle gets the Title of the ExtraStuff.
func (m *ExtraStuff) GetTitle() isExtraStuff_Title {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *ExtraStuff) GetAddresses() map[int32]string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *ExtraStuff) GetFirstName() string {
	if x, ok := m.GetTitle().(*ExtraStuff_FirstName); ok {
		return x.FirstName
	}
	return ""
}

func (m *ExtraStuff) GetIdNumber() int32 {
	if x, ok := m.GetTitle().(*ExtraStuff_IdNumber); ok {
		return x.IdNumber
	}
	return 0
}

func (m *ExtraStuff) GetCardNumbers() []uint32 {
	if m != nil {
		return m.CardNumbers
	}
	return nil
}

// Marshal marshals ExtraStuff to a slice of bytes.
func (m *ExtraStuff) Marshal() []byte {
	writer := jspb.NewWriter()

	// The Map, field 1
	if len(m.Addresses) > 0 {
		writer.WriteMessage(1, func() {
			for key, value := range m.Addresses {
				writer.WriteInt32(1, key)
				writer.WriteString(2, value)
			}
		})
	}

	// The Oneof, field 2, 3
	switch t := m.Title.(type) {
	case *ExtraStuff_FirstName:
		writer.WriteString(2, t.FirstName)
	case *ExtraStuff_IdNumber:
		writer.WriteInt32(3, t.IdNumber)
	}

	// The Slice, field 4
	if len(m.CardNumbers) > 0 {
		writer.WriteUint32Slice(4, m.CardNumbers)
	}

	return writer.GetResult()
}

// Unmarshal unmarshals a ExtraStuff from a slice of bytes.
func (m *ExtraStuff) Unmarshal(rawBytes []byte) (x *ExtraStuff, err error) {
	reader := jspb.NewReader(rawBytes)
	x = &ExtraStuff{}

	for reader.Next() {
		switch reader.GetFieldNumber() {
		case 1:
			x.Addresses = map[int32]string{}
			reader.ReadMessage(func() {
				var key int32
				var value string
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadInt32()
					case 2:
						value = reader.ReadString()
					}
					x.Addresses[key] = value
				}
			})
		case 2:
			x.Title = &ExtraStuff_FirstName{
				FirstName: reader.ReadString(),
			}
		case 3:
			x.Title = &ExtraStuff_IdNumber{
				IdNumber: reader.ReadInt32(),
			}
		case 4:
			x.CardNumbers = reader.ReadUint32Slice()
		default:
			reader.SkipField()
		}
	}

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return x, nil
}

type PingRequest struct {
	Value             string
	ResponseCount     int32
	ErrorCodeReturned uint32
	FailureType       PingRequest_FailureType
	CheckMetadata     bool
	SendHeaders       bool
	SendTrailers      bool
	MessageLatencyMs  int32
}

func (m *PingRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PingRequest) GetResponseCount() int32 {
	if m != nil {
		return m.ResponseCount
	}
	return 0
}

func (m *PingRequest) GetErrorCodeReturned() uint32 {
	if m != nil {
		return m.ErrorCodeReturned
	}
	return 0
}

func (m *PingRequest) GetFailureType() PingRequest_FailureType {
	if m != nil {
		return m.FailureType
	}
	return PingRequest_NONE
}

func (m *PingRequest) GetCheckMetadata() bool {
	if m != nil {
		return m.CheckMetadata
	}
	return false
}

func (m *PingRequest) GetSendHeaders() bool {
	if m != nil {
		return m.SendHeaders
	}
	return false
}

func (m *PingRequest) GetSendTrailers() bool {
	if m != nil {
		return m.SendTrailers
	}
	return false
}

func (m *PingRequest) GetMessageLatencyMs() int32 {
	if m != nil {
		return m.MessageLatencyMs
	}
	return 0
}

// Marshal marshals PingRequest to a slice of bytes.
func (m *PingRequest) Marshal() []byte {
	writer := jspb.NewWriter()

	if len(m.Value) > 0 {
		writer.WriteString(1, m.Value)
	}

	if m.ResponseCount != 0 {
		writer.WriteInt32(2, m.ResponseCount)
	}

	if m.ErrorCodeReturned != 0 {
		writer.WriteUint32(3, m.ErrorCodeReturned)
	}

	if m.FailureType != PingRequest_NONE {
		writer.WriteEnum(4, int(m.FailureType))
	}

	if m.CheckMetadata {
		writer.WriteBool(5, m.CheckMetadata)
	}

	if m.SendHeaders {
		writer.WriteBool(6, m.SendHeaders)
	}

	if m.SendTrailers {
		writer.WriteBool(7, m.SendTrailers)
	}

	if m.MessageLatencyMs != 0 {
		writer.WriteInt32(8, m.MessageLatencyMs)
	}

	return writer.GetResult()
}

// Unmarshal unmarshals a PingRequest from a slice of bytes.
func (m *PingRequest) Unmarshal(rawBytes []byte) (x *PingRequest, err error) {
	reader := jspb.NewReader(rawBytes)
	x = &PingRequest{}

	for reader.Next() {
		switch reader.GetFieldNumber() {
		case 1:
			x.Value = reader.ReadString()
		case 2:
			x.ResponseCount = reader.ReadInt32()
		case 3:
			x.ErrorCodeReturned = reader.ReadUint32()
		case 4:
			x.FailureType = PingRequest_FailureType(reader.ReadEnum())
		case 5:
			x.CheckMetadata = reader.ReadBool()
		case 6:
			x.SendHeaders = reader.ReadBool()
		case 7:
			x.SendTrailers = reader.ReadBool()
		case 8:
			x.MessageLatencyMs = reader.ReadInt32()
		default:
			reader.SkipField()
		}
	}

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return x, nil
}

type PingResponse struct {
	Value   string
	Counter int32
}

func (m *PingResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PingResponse) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

// Marshal marshals PingResponse to a slice of bytes.
func (m *PingResponse) Marshal() []byte {
	writer := jspb.NewWriter()

	if len(m.Value) > 0 {
		writer.WriteString(1, m.Value)
	}

	if m.Counter != 0 {
		writer.WriteInt32(2, m.Counter)
	}

	return writer.GetResult()
}

// Unmarshal unmarshals a PingResponse from a slice of bytes.
func (m *PingResponse) Unmarshal(rawBytes []byte) (x *PingResponse, err error) {
	reader := jspb.NewReader(rawBytes)
	x = &PingResponse{}

	for reader.Next() {
		switch reader.GetFieldNumber() {
		case 1:
			x.Value = reader.ReadString()
		case 2:
			x.Counter = reader.ReadInt32()
		default:
			reader.SkipField()
		}
	}

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return x, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion1

// Client API for TestService service

type TestServiceClient interface {
	PingEmpty(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*PingResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*PingResponse, error)
	PingError(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*google_protobuf.Empty, error)
	PingList(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (TestService_PingListClient, error)
}

type testServiceClient struct {
	client *grpcweb.Client
}

// NewTestServiceClient creates a new gRPC-Web client.
func NewTestServiceClient(hostname string, opts ...grpcweb.DialOption) TestServiceClient {
	return &testServiceClient{
		client: grpcweb.NewClient(hostname, "test.TestService", opts...),
	}
}

func (c *testServiceClient) PingEmpty(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*PingResponse, error) {
	req := in.Serialize()

	resp, err := c.client.RPCCall(ctx, "PingEmpty", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Unmarshal(resp)
}

func (c *testServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*PingResponse, error) {
	req := in.Marshal()

	resp, err := c.client.RPCCall(ctx, "Ping", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Unmarshal(resp)
}

func (c *testServiceClient) PingError(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*google_protobuf.Empty, error) {
	req := in.Marshal()

	resp, err := c.client.RPCCall(ctx, "PingError", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(google_protobuf.Empty).Deserialize(resp)
}

func (c *testServiceClient) PingList(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (TestService_PingListClient, error) {
	req := in.Marshal()

	srv, err := c.client.Stream(ctx, "PingList", req, opts...)
	if err != nil {
		return nil, err
	}

	return &testServicePingListClient{
		stream: srv,
	}, nil
}

type TestService_PingListClient interface {
	Recv() (*PingResponse, error)
}

type testServicePingListClient struct {
	stream *grpcweb.StreamClient
}

func (x *testServicePingListClient) Recv() (*PingResponse, error) {
	resp, err := x.stream.Recv()
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Unmarshal(resp)
}
