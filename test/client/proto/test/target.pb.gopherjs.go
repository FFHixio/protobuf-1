// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: proto/test/test.proto

/*
	Package test is a generated protocol buffer package.

	It is generated from these files:
		proto/test/test.proto

	It has these top-level messages:
		ExtraStuff
		PingRequest
		PingResponse
*/
package test

import js "github.com/gopherjs/gopherjs/js"
import jspb "github.com/johanbrandhorst/protobuf/jspb"
import google_protobuf "github.com/johanbrandhorst/protobuf/ptypes/empty"

import (
	context "context"

	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion1

type PingRequest_FailureType int

const (
	PingRequest_NONE PingRequest_FailureType = 0
	PingRequest_CODE PingRequest_FailureType = 1
	PingRequest_DROP PingRequest_FailureType = 2
)

var PingRequest_FailureType_name = map[int]string{
	0: "NONE",
	1: "CODE",
	2: "DROP",
}
var PingRequest_FailureType_value = map[string]int{
	"NONE": 0,
	"CODE": 1,
	"DROP": 2,
}

func (x PingRequest_FailureType) String() string {
	return PingRequest_FailureType_name[int(x)]
}

type ExtraStuff struct {
	Addresses map[int32]string
	// Types that are valid to be assigned to Title:
	//	*ExtraStuff_FirstName
	//	*ExtraStuff_IdNumber
	Title       isExtraStuff_Title
	CardNumbers []uint32
}

// Types that are valid to be assigned to Title:
//	*ExtraStuff_FirstName
//	*ExtraStuff_IdNumber
type isExtraStuff_Title interface {
	isExtraStuff_Title()
}

type ExtraStuff_FirstName struct {
	FirstName string
}
type ExtraStuff_IdNumber struct {
	IdNumber int32
}

func (*ExtraStuff_FirstName) isExtraStuff_Title() {}
func (*ExtraStuff_IdNumber) isExtraStuff_Title()  {}

// GetTitle gets the Title of the ExtraStuff.
func (m *ExtraStuff) GetTitle() isExtraStuff_Title {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *ExtraStuff) GetAddresses() map[int32]string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *ExtraStuff) GetFirstName() string {
	if x, ok := m.GetTitle().(*ExtraStuff_FirstName); ok {
		return x.FirstName
	}
	return ""
}

func (m *ExtraStuff) GetIdNumber() int32 {
	if x, ok := m.GetTitle().(*ExtraStuff_IdNumber); ok {
		return x.IdNumber
	}
	return 0
}

func (m *ExtraStuff) GetCardNumbers() []uint32 {
	if m != nil {
		return m.CardNumbers
	}
	return nil
}

// Serialize marshals ExtraStuff to a slice of bytes.
func (m *ExtraStuff) Serialize() []byte {
	writer := js.Global.Get("BinaryWriter").New()

	// The Map, field 1
	if len(m.Addresses) > 0 {
		keyWriter := js.Global.Get("BinaryWriter").Get("prototype").Get("writeInt32")
		valueWriter := js.Global.Get("BinaryWriter").Get("prototype").Get("writeString")
		writer.Call("beginSubMessage", 1)
		for key, value := range m.Addresses {
			keyWriter.Call("call", writer, 1, key)
			valueWriter.Call("call", writer, 2, value)
		}
		writer.Call("endSubMessage")
	}

	// The Oneof, field 2, 3
	switch t := m.Title.(type) {
	case *ExtraStuff_FirstName:
		writer.Call("writeString", 2, t.FirstName)
	case *ExtraStuff_IdNumber:
		writer.Call("writeInt32", 3, t.IdNumber)
	}

	// The Slice, field 4
	if len(m.CardNumbers) > 0 {
		writer.Call("writePackedUint32", 4, m.CardNumbers)
	}

	/*
	  var f = undefined;
	  f = message.getAddressesMap(true);
	  if (f && f.getLength() > 0) {
	    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeString);
	  }
	  f = /** @type {string} / (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} / (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	  f = message.getCardNumbersList();
	  if (f.length > 0) {
	    writer.writePackedUint32(
	      4,
	      f
	    );
	  }
	*/

	return writer.Call("getResultBuffer").Interface().([]byte)
}

// Deserialize unmarshals a ExtraStuff from a slice of bytes.
func (m *ExtraStuff) Deserialize(rawBytes []byte) (x *ExtraStuff, err error) {
	reader := js.Global.Get("BinaryReader").New(rawBytes)
	x = &ExtraStuff{}

	defer func() {
		e := recover()

		if e == nil {
			return
		}

		if e, ok := e.(*js.Error); ok {
			err = e
		} else {
			panic(e)
		}
	}()

	for reader.Call("nextField").Bool() {
		if reader.Call("isEndGroup").Bool() {
			break
		}

		switch reader.Call("getFieldNumber").Int64() {
		case 1:
			m.Addresses = map[int32]string{}
			mr := struct {
				*js.Object
				SetFunc func(int32, string) `js:"set"`
			}{
				Object: js.Global.Get("Object").New(),
			}
			mr.SetFunc = func(key int32, value string) {
				m.Addresses[key] = value
			}
			reader.Call("readMessage", mr, func(message, reader *js.Object) {
				m := js.Global.Get("Map")
				keyReader := js.Global.Get("BinaryReader").Get("prototype").Get("readInt32")
				valueReader := js.Global.Get("BinaryReader").Get("prototype").Get("readString")
				m.Call("deserializeBinary", message, reader, keyReader, valueReader)
			})
		case 2:
			x.Title = &ExtraStuff_FirstName{
				FirstName: reader.Call("readString").String(),
			}
		case 3:
			x.Title = &ExtraStuff_IdNumber{
				IdNumber: int32(reader.Call("readInt32").Int()),
			}
		case 4:
			values := reader.Call("readPackedUint32").Interface().([]interface{})
			for _, value := range values {
				x.CardNumbers = append(x.CardNumbers, uint32(value.(float64)))
			}
		default:
			reader.Call("skipField")
		}
	}

	return m, nil
}

type PingRequest struct {
	*js.Object
}

// GetValue gets the Value of the PingRequest.
func (m *PingRequest) GetValue() (x string) {
	if m == nil {
		return x
	}
	return m.Call("getValue").String()
}

// SetValue sets the Value of the PingRequest.
func (m *PingRequest) SetValue(v string) {
	m.Call("setValue", v)
}

// GetResponseCount gets the ResponseCount of the PingRequest.
func (m *PingRequest) GetResponseCount() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getResponseCount").Int())
}

// SetResponseCount sets the ResponseCount of the PingRequest.
func (m *PingRequest) SetResponseCount(v int32) {
	m.Call("setResponseCount", v)
}

// GetErrorCodeReturned gets the ErrorCodeReturned of the PingRequest.
func (m *PingRequest) GetErrorCodeReturned() (x uint32) {
	if m == nil {
		return x
	}
	return uint32(m.Call("getErrorCodeReturned").Int())
}

// SetErrorCodeReturned sets the ErrorCodeReturned of the PingRequest.
func (m *PingRequest) SetErrorCodeReturned(v uint32) {
	m.Call("setErrorCodeReturned", v)
}

// GetFailureType gets the FailureType of the PingRequest.
func (m *PingRequest) GetFailureType() (x PingRequest_FailureType) {
	if m == nil {
		return x
	}
	return PingRequest_FailureType(m.Call("getFailureType").Int())
}

// SetFailureType sets the FailureType of the PingRequest.
func (m *PingRequest) SetFailureType(v PingRequest_FailureType) {
	m.Call("setFailureType", v)
}

// GetCheckMetadata gets the CheckMetadata of the PingRequest.
func (m *PingRequest) GetCheckMetadata() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getCheckMetadata").Bool()
}

// SetCheckMetadata sets the CheckMetadata of the PingRequest.
func (m *PingRequest) SetCheckMetadata(v bool) {
	m.Call("setCheckMetadata", v)
}

// GetSendHeaders gets the SendHeaders of the PingRequest.
func (m *PingRequest) GetSendHeaders() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getSendHeaders").Bool()
}

// SetSendHeaders sets the SendHeaders of the PingRequest.
func (m *PingRequest) SetSendHeaders(v bool) {
	m.Call("setSendHeaders", v)
}

// GetSendTrailers gets the SendTrailers of the PingRequest.
func (m *PingRequest) GetSendTrailers() (x bool) {
	if m == nil {
		return x
	}
	return m.Call("getSendTrailers").Bool()
}

// SetSendTrailers sets the SendTrailers of the PingRequest.
func (m *PingRequest) SetSendTrailers(v bool) {
	m.Call("setSendTrailers", v)
}

// GetMessageLatencyMs gets the MessageLatencyMs of the PingRequest.
func (m *PingRequest) GetMessageLatencyMs() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getMessageLatencyMs").Int())
}

// SetMessageLatencyMs sets the MessageLatencyMs of the PingRequest.
func (m *PingRequest) SetMessageLatencyMs(v int32) {
	m.Call("setMessageLatencyMs", v)
}

// New creates a new PingRequest.
func (m *PingRequest) New(value string, responseCount int32, errorCodeReturned uint32, failureType PingRequest_FailureType, checkMetadata bool, sendHeaders bool, sendTrailers bool, messageLatencyMs int32) *PingRequest {
	m = &PingRequest{
		Object: js.Global.Get("proto").Get("test").Get("PingRequest").New([]interface{}{
			value,
			responseCount,
			errorCodeReturned,
			failureType,
			checkMetadata,
			sendHeaders,
			sendTrailers,
			messageLatencyMs,
		}),
	}

	return m
}

// Serialize marshals PingRequest to a slice of bytes.
func (m *PingRequest) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a PingRequest from a slice of bytes.
func (m *PingRequest) Deserialize(rawBytes []byte) (*PingRequest, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("test").Get("PingRequest"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &PingRequest{
		Object: obj,
	}, nil
}

type PingResponse struct {
	*js.Object
}

// GetValue gets the Value of the PingResponse.
func (m *PingResponse) GetValue() (x string) {
	if m == nil {
		return x
	}
	return m.Call("getValue").String()
}

// SetValue sets the Value of the PingResponse.
func (m *PingResponse) SetValue(v string) {
	m.Call("setValue", v)
}

// GetCounter gets the Counter of the PingResponse.
func (m *PingResponse) GetCounter() (x int32) {
	if m == nil {
		return x
	}
	return int32(m.Call("getCounter").Int())
}

// SetCounter sets the Counter of the PingResponse.
func (m *PingResponse) SetCounter(v int32) {
	m.Call("setCounter", v)
}

// New creates a new PingResponse.
func (m *PingResponse) New(Value string, counter int32) *PingResponse {
	m = &PingResponse{
		Object: js.Global.Get("proto").Get("test").Get("PingResponse").New([]interface{}{
			Value,
			counter,
		}),
	}

	return m
}

// Serialize marshals PingResponse to a slice of bytes.
func (m *PingResponse) Serialize() []byte {
	return jspb.Serialize(m)
}

// Deserialize unmarshals a PingResponse from a slice of bytes.
func (m *PingResponse) Deserialize(rawBytes []byte) (*PingResponse, error) {
	obj, err := jspb.Deserialize(js.Global.Get("proto").Get("test").Get("PingResponse"), rawBytes)
	if err != nil {
		return nil, err
	}

	return &PingResponse{
		Object: obj,
	}, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion1

// Client API for TestService service

type TestServiceClient interface {
	PingEmpty(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*PingResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*PingResponse, error)
	PingError(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*google_protobuf.Empty, error)
	PingList(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (TestService_PingListClient, error)
}

type testServiceClient struct {
	client *grpcweb.Client
}

// NewTestServiceClient creates a new gRPC-Web client.
func NewTestServiceClient(hostname string, opts ...grpcweb.DialOption) TestServiceClient {
	return &testServiceClient{
		client: grpcweb.NewClient(hostname, "test.TestService", opts...),
	}
}

func (c *testServiceClient) PingEmpty(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*PingResponse, error) {
	req := in.Serialize()

	resp, err := c.client.RPCCall(ctx, "PingEmpty", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Deserialize(resp)
}

func (c *testServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*PingResponse, error) {
	req := in.Serialize()

	resp, err := c.client.RPCCall(ctx, "Ping", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Deserialize(resp)
}

func (c *testServiceClient) PingError(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (*google_protobuf.Empty, error) {
	req := in.Serialize()

	resp, err := c.client.RPCCall(ctx, "PingError", req, opts...)
	if err != nil {
		return nil, err
	}

	return new(google_protobuf.Empty).Deserialize(resp)
}

func (c *testServiceClient) PingList(ctx context.Context, in *PingRequest, opts ...grpcweb.CallOption) (TestService_PingListClient, error) {
	req := in.Serialize()

	srv, err := c.client.Stream(ctx, "PingList", req, opts...)
	if err != nil {
		return nil, err
	}

	return &testServicePingListClient{
		stream: srv,
	}, nil
}

type TestService_PingListClient interface {
	Recv() (*PingResponse, error)
}

type testServicePingListClient struct {
	stream *grpcweb.StreamClient
}

func (x *testServicePingListClient) Recv() (*PingResponse, error) {
	resp, err := x.stream.Recv()
	if err != nil {
		return nil, err
	}

	return new(PingResponse).Deserialize(resp)
}
