// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multi/multi3.proto

package multitest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/johanbrandhorst/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Multi3_HatType int32

const (
	Multi3_FEDORA Multi3_HatType = 0
	Multi3_FEZ    Multi3_HatType = 1
)

var Multi3_HatType_name = map[int32]string{
	0: "FEDORA",
	1: "FEZ",
}
var Multi3_HatType_value = map[string]int32{
	"FEDORA": 0,
	"FEZ":    1,
}

func (x Multi3_HatType) String() string {
	return proto.EnumName(Multi3_HatType_name, int32(x))
}
func (Multi3_HatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type Multi3 struct {
	HatType Multi3_HatType `protobuf:"varint,1,opt,name=hat_type,json=hatType,enum=multitest.Multi3_HatType" json:"hat_type,omitempty"`
}

func (m *Multi3) Reset()                    { *m = Multi3{} }
func (m *Multi3) String() string            { return proto.CompactTextString(m) }
func (*Multi3) ProtoMessage()               {}
func (*Multi3) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Multi3) GetHatType() Multi3_HatType {
	if m != nil {
		return m.HatType
	}
	return Multi3_FEDORA
}

func init() {
	proto.RegisterType((*Multi3)(nil), "multitest.Multi3")
	proto.RegisterEnum("multitest.Multi3_HatType", Multi3_HatType_name, Multi3_HatType_value)
}

func init() { proto.RegisterFile("multi/multi3.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x2d, 0xcd, 0x29,
	0xc9, 0xd4, 0x07, 0x93, 0xc6, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x9c, 0x60, 0x5e, 0x49,
	0x6a, 0x71, 0x89, 0x94, 0x45, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e,
	0x56, 0x7e, 0x46, 0x62, 0x5e, 0x52, 0x51, 0x62, 0x5e, 0x4a, 0x46, 0x7e, 0x51, 0x71, 0x89, 0x3e,
	0x58, 0x71, 0x52, 0x69, 0x1a, 0x84, 0xa1, 0x9f, 0x9e, 0x5f, 0x90, 0x91, 0x5a, 0x94, 0x55, 0x0c,
	0x31, 0x44, 0x29, 0x8e, 0x8b, 0xcd, 0x17, 0x6c, 0xa8, 0x90, 0x09, 0x17, 0x47, 0x46, 0x62, 0x49,
	0x7c, 0x49, 0x65, 0x41, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0xa4, 0x1e, 0xdc, 0x06,
	0x3d, 0x88, 0x22, 0x3d, 0x8f, 0xc4, 0x92, 0x90, 0xca, 0x82, 0xd4, 0x20, 0xf6, 0x0c, 0x08, 0x43,
	0x49, 0x8e, 0x8b, 0x1d, 0x2a, 0x26, 0xc4, 0xc5, 0xc5, 0xe6, 0xe6, 0xea, 0xe2, 0x1f, 0xe4, 0x28,
	0xc0, 0x20, 0xc4, 0xce, 0xc5, 0xec, 0xe6, 0x1a, 0x25, 0xc0, 0xe8, 0xe4, 0xfa, 0xcb, 0xc1, 0x89,
	0x68, 0xc7, 0x25, 0xeb, 0xa6, 0xa7, 0xe6, 0xe9, 0xc2, 0x5c, 0xa8, 0x0f, 0xb2, 0x18, 0xe2, 0xe5,
	0x24, 0x36, 0xb0, 0xbc, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x6a, 0x90, 0xa5, 0x08, 0x01,
	0x00, 0x00,
}
