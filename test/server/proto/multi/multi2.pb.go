// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multi/multi2.proto

package multitest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/johanbrandhorst/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Multi2_Color int32

const (
	Multi2_BLUE  Multi2_Color = 0
	Multi2_GREEN Multi2_Color = 1
	Multi2_RED   Multi2_Color = 2
)

var Multi2_Color_name = map[int32]string{
	0: "BLUE",
	1: "GREEN",
	2: "RED",
}
var Multi2_Color_value = map[string]int32{
	"BLUE":  0,
	"GREEN": 1,
	"RED":   2,
}

func (x Multi2_Color) String() string {
	return proto.EnumName(Multi2_Color_name, int32(x))
}
func (Multi2_Color) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type Multi2 struct {
	RequiredValue int32        `protobuf:"varint,1,opt,name=required_value,json=requiredValue" json:"required_value,omitempty"`
	Color         Multi2_Color `protobuf:"varint,2,opt,name=color,enum=multitest.Multi2_Color" json:"color,omitempty"`
}

func (m *Multi2) Reset()                    { *m = Multi2{} }
func (m *Multi2) String() string            { return proto.CompactTextString(m) }
func (*Multi2) ProtoMessage()               {}
func (*Multi2) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Multi2) GetRequiredValue() int32 {
	if m != nil {
		return m.RequiredValue
	}
	return 0
}

func (m *Multi2) GetColor() Multi2_Color {
	if m != nil {
		return m.Color
	}
	return Multi2_BLUE
}

func init() {
	proto.RegisterType((*Multi2)(nil), "multitest.Multi2")
	proto.RegisterEnum("multitest.Multi2_Color", Multi2_Color_name, Multi2_Color_value)
}

func init() { proto.RegisterFile("multi/multi2.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x2d, 0xcd, 0x29,
	0xc9, 0xd4, 0x07, 0x93, 0x46, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x9c, 0x60, 0x5e, 0x49,
	0x6a, 0x71, 0x89, 0x94, 0x45, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e,
	0x56, 0x7e, 0x46, 0x62, 0x5e, 0x52, 0x51, 0x62, 0x5e, 0x4a, 0x46, 0x7e, 0x51, 0x71, 0x89, 0x3e,
	0x58, 0x71, 0x52, 0x69, 0x1a, 0x84, 0xa1, 0x9f, 0x9e, 0x5f, 0x90, 0x91, 0x5a, 0x94, 0x55, 0x0c,
	0x31, 0x44, 0xa9, 0x95, 0x91, 0x8b, 0xcd, 0x17, 0x6c, 0xaa, 0x90, 0x2a, 0x17, 0x5f, 0x51, 0x6a,
	0x61, 0x69, 0x66, 0x51, 0x6a, 0x4a, 0x7c, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x6b, 0x10, 0x2f, 0x4c, 0x34, 0x0c, 0x24, 0x28, 0xa4, 0xcb, 0xc5, 0x9a, 0x9c, 0x9f, 0x93,
	0x5f, 0x24, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x67, 0x24, 0xae, 0x07, 0x77, 0x86, 0x1e, 0xc4, 0x20,
	0x3d, 0x67, 0x90, 0x74, 0x10, 0x44, 0x95, 0x92, 0x2a, 0x17, 0x2b, 0x98, 0x2f, 0xc4, 0xc1, 0xc5,
	0xe2, 0xe4, 0x13, 0xea, 0x2a, 0xc0, 0x20, 0xc4, 0xc9, 0xc5, 0xea, 0x1e, 0xe4, 0xea, 0xea, 0x27,
	0xc0, 0x28, 0xc4, 0xce, 0xc5, 0x1c, 0xe4, 0xea, 0x22, 0xc0, 0xe4, 0xe4, 0x76, 0xe8, 0x86, 0xa2,
	0x13, 0xd1, 0xbe, 0x48, 0xd6, 0x4d, 0x4f, 0xcd, 0xd3, 0x85, 0x79, 0x45, 0x1f, 0x64, 0x39, 0x24,
	0x6c, 0x92, 0xd8, 0xc0, 0xf2, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xac, 0x2e, 0xe2, 0x20,
	0x31, 0x01, 0x00, 0x00,
}
