{
  "_args": [
    [
      {
        "raw": "grpc-web-client",
        "scope": null,
        "escapedName": "grpc-web-client",
        "name": "grpc-web-client",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/johan/gows/src/github.com/johanbrandhorst/gopherjs-improbable-grpc-web/grpcwebjs"
    ]
  ],
  "_from": "grpc-web-client@latest",
  "_id": "grpc-web-client@0.2.1",
  "_inCache": true,
  "_location": "/grpc-web-client",
  "_nodeVersion": "5.7.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/grpc-web-client-0.2.1.tgz_1493212170499_0.0040641354862600565"
  },
  "_npmUser": {
    "name": "marcuslongmuir",
    "email": "marcus@marcuslongmuir.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grpc-web-client",
    "scope": null,
    "escapedName": "grpc-web-client",
    "name": "grpc-web-client",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/grpc-web-client/-/grpc-web-client-0.2.1.tgz",
  "_shasum": "768b28d21ba6ece104267a36c6c73fdf320cf5d3",
  "_shrinkwrap": null,
  "_spec": "grpc-web-client",
  "_where": "/home/johan/gows/src/github.com/johanbrandhorst/gopherjs-improbable-grpc-web/grpcwebjs",
  "author": {
    "name": "Improbable"
  },
  "dependencies": {
    "browser-headers": "^0.2.1"
  },
  "description": "gRPC-Web client for browsers (JS/TS)",
  "devDependencies": {
    "@types/google-protobuf": "^3.2.5",
    "google-protobuf": "^3.2.0",
    "tslint": "^4.5.1",
    "typescript": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "768b28d21ba6ece104267a36c6c73fdf320cf5d3",
    "tarball": "https://registry.npmjs.org/grpc-web-client/-/grpc-web-client-0.2.1.tgz"
  },
  "files": [
    "dist"
  ],
  "keywords": [
    "grpc",
    "grpc-web",
    "protobuf",
    "typescript",
    "ts"
  ],
  "license": "Apache-2.0",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "marcuslongmuir",
      "email": "marcus@marcuslongmuir.com"
    }
  ],
  "name": "grpc-web-client",
  "optionalDependencies": {},
  "peerDependencies": {
    "@types/google-protobuf": "^3.2.5",
    "google-protobuf": "^3.2.0"
  },
  "readme": "# grpc-web-client\n> Library for making gRPC-Web requests from a Browser\n\nThis library is intended for both JavaScript and TypeScript usage.\n\n*Note: This only works if the server supports [gRPC-Web](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md)*\n\nA Golang gRPC-Web middleware and a Golang-based gRPC-Web proxy are [available here](https://github.com/improbable-eng/grpc-web).\n\n## Installation\n\n`grpc-web-client` has peer dependencies of `google-protobuf` and `@types/google-protobuf`.\n\n`npm install google-protobuf @types/google-protobuf grpc-web-client --save`\n\n## Example Project\n\nThere is an [example project available here](https://github.com/improbable-eng/grpc-web/tree/master/example)\n\n## Usage\n* Use [`ts-protoc-gen`](https://www.npmjs.com/package/ts-protoc-gen) with [`protoc`](https://github.com/google/protobuf) to generate `.js` and `.d.ts` files for your request and response classes. `ts-protoc-gen` can also generate gRPC service definitions with the `service=true` argument.\n* Make a request:\n```ts\nimport {grpc, BrowserHeaders} from \"grpc-web-client\";\n\n// Import code-generated data structures.\nimport {BookService} from \"./generated/proto/examplecom/library/book_service_pb_service\";\nimport {QueryBooksRequest, Book, GetBookRequest} from \"./generated/proto/examplecom/library/book_service_pb\";\n\nconst queryBooksRequest = new QueryBooksRequest();\nqueryBooksRequest.setAuthorPrefix(\"Geor\");\ngrpc.invoke(BookService.QueryBooks, {\n  request: queryBooksRequest,\n  host: \"https://example.com\",\n  onMessage: (message: Book) => {\n    console.log(\"got book: \", message.toObject());\n  },\n  onEnd: (code: grpc.Code, msg: string | undefined, trailers: BrowserHeaders) => {\n    if code == grpc.Code.OK {\n      console.log(\"all ok\")\n    } else {\n      console.log(\"hit an error\", code, msg, trailers);\n    }\n  }\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "github.com/improbable-eng/grpc-web"
  },
  "scripts": {
    "clean": "rm -rf build && rm -rf dist",
    "lib:build": "npm run clean && tsc && cp -R build/ dist/",
    "lint": "tslint -c ./tslint.json ./src/**/*.ts"
  },
  "types": "dist/index.d.ts",
  "version": "0.2.1"
}
