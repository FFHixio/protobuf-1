import * as jspb from "google-protobuf";
import { BrowserHeaders } from "browser-headers";
import { Transport } from "./transports/Transport";
export { BrowserHeaders };
export declare namespace grpc {
    interface ProtobufMessageClass<T extends jspb.Message> {
        new (): T;
        deserializeBinary(bytes: Uint8Array): T;
    }
    enum Code {
        OK = 0,
        Canceled = 1,
        Unknown = 2,
        InvalidArgument = 3,
        DeadlineExceeded = 4,
        NotFound = 5,
        AlreadyExists = 6,
        PermissionDenied = 7,
        ResourceExhausted = 8,
        FailedPrecondition = 9,
        Aborted = 10,
        OutOfRange = 11,
        Unimplemented = 12,
        Internal = 13,
        Unavailable = 14,
        DataLoss = 15,
        Unauthenticated = 16,
    }
    interface ServiceDefinition {
        serviceName: string;
    }
    interface MethodDefinition<TRequest extends jspb.Message, TResponse extends jspb.Message> {
        methodName: string;
        service: ServiceDefinition;
        requestStream: boolean;
        responseStream: boolean;
        requestType: ProtobufMessageClass<TRequest>;
        responseType: ProtobufMessageClass<TResponse>;
    }
    type RpcOptions<TRequest extends jspb.Message, TResponse extends jspb.Message> = {
        host: string;
        request: TRequest;
        headers?: BrowserHeaders.ConstructorArg;
        onHeaders?: (headers: BrowserHeaders) => void;
        onMessage?: (res: TResponse) => void;
        onEnd: (code: Code, message: string, trailers: BrowserHeaders) => void;
        transport?: Transport;
        debug?: boolean;
    };
    function invoke<TRequest extends jspb.Message, TResponse extends jspb.Message, M extends MethodDefinition<TRequest, TResponse>>(methodDescriptor: M, props: RpcOptions<TRequest, TResponse>): void;
}
