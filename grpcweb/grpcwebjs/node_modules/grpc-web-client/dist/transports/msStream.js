"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var browser_headers_1 = require("browser-headers");
var debug_1 = require("../debug");
function msStreamRequest(options) {
    options.debug && debug_1.debug("msStream", options);
    var xhr = new XMLHttpRequest();
    function onLoadEvent() {
        options.debug && debug_1.debug("msStream.onLoadEvent");
        options.debug && debug_1.debug("response ", JSON.stringify(xhr.response, null, 2));
    }
    function onStateChange() {
        options.debug && debug_1.debug("msStream.onStateChange", this.readyState);
        if (this.readyState === this.HEADERS_RECEIVED) {
            options.onHeaders(new browser_headers_1.BrowserHeaders(this.getAllResponseHeaders()), this.status);
        }
        if (this.readyState === this.LOADING) {
            var reader_1 = new MSStreamReader();
            var pos_1 = 0;
            reader_1.onprogress = function () {
                if (reader_1.result.byteLength > pos_1) {
                    var asBuffer = new Uint8Array(reader_1.result, pos_1);
                    pos_1 = reader_1.result.byteLength;
                    options.onChunk(asBuffer);
                }
            };
            reader_1.onload = function () {
                options.onEnd();
            };
            reader_1.readAsArrayBuffer(this.response);
        }
    }
    xhr.open("POST", options.url);
    xhr.responseType = "ms-stream";
    options.headers.forEach(function (key, values) {
        xhr.setRequestHeader(key, values.join(", "));
    });
    xhr.addEventListener("readystatechange", onStateChange);
    xhr.addEventListener("loadend", onLoadEvent);
    xhr.addEventListener("error", function (err) {
        options.debug && debug_1.debug("msStream.error", err);
        options.onEnd(err.error);
    });
    xhr.send(options.body);
}
exports.default = msStreamRequest;
//# sourceMappingURL=msStream.js.map